-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_compute_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv2_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    conv2_out_empty_n : IN STD_LOGIC;
    conv2_out_read : OUT STD_LOGIC;
    conv2_out_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
    conv2_out_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0);
    pool1_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    pool1_out_full_n : IN STD_LOGIC;
    pool1_out_write : OUT STD_LOGIC;
    pool1_out_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    pool1_out_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_top_compute_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_buf_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal input_buf_ce0 : STD_LOGIC;
    signal input_buf_we0 : STD_LOGIC;
    signal input_buf_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_buf_ce1 : STD_LOGIC;
    signal input_buf_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_input_func_1_fu_24_ap_start : STD_LOGIC;
    signal grp_read_input_func_1_fu_24_ap_done : STD_LOGIC;
    signal grp_read_input_func_1_fu_24_ap_idle : STD_LOGIC;
    signal grp_read_input_func_1_fu_24_ap_ready : STD_LOGIC;
    signal grp_read_input_func_1_fu_24_conv2_out_read : STD_LOGIC;
    signal grp_read_input_func_1_fu_24_input_buf_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_read_input_func_1_fu_24_input_buf_ce0 : STD_LOGIC;
    signal grp_read_input_func_1_fu_24_input_buf_we0 : STD_LOGIC;
    signal grp_read_input_func_1_fu_24_input_buf_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pooling_func_1_fu_32_ap_start : STD_LOGIC;
    signal grp_pooling_func_1_fu_32_ap_done : STD_LOGIC;
    signal grp_pooling_func_1_fu_32_ap_idle : STD_LOGIC;
    signal grp_pooling_func_1_fu_32_ap_ready : STD_LOGIC;
    signal grp_pooling_func_1_fu_32_pool1_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pooling_func_1_fu_32_pool1_out_write : STD_LOGIC;
    signal grp_pooling_func_1_fu_32_input_buf_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pooling_func_1_fu_32_input_buf_ce0 : STD_LOGIC;
    signal grp_pooling_func_1_fu_32_input_buf_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_pooling_func_1_fu_32_input_buf_ce1 : STD_LOGIC;
    signal grp_read_input_func_1_fu_24_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call3 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_pooling_func_1_fu_32_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_read_input_func_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv2_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv2_out_empty_n : IN STD_LOGIC;
        conv2_out_read : OUT STD_LOGIC;
        conv2_out_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
        conv2_out_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0);
        input_buf_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_buf_ce0 : OUT STD_LOGIC;
        input_buf_we0 : OUT STD_LOGIC;
        input_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cnn_top_pooling_func_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pool1_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        pool1_out_full_n : IN STD_LOGIC;
        pool1_out_write : OUT STD_LOGIC;
        pool1_out_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
        pool1_out_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
        input_buf_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_buf_ce0 : OUT STD_LOGIC;
        input_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_buf_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_buf_ce1 : OUT STD_LOGIC;
        input_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cnn_top_compute_1_input_buf_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    input_buf_U : component cnn_top_compute_1_input_buf_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 8192,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => input_buf_address0,
        ce0 => input_buf_ce0,
        we0 => input_buf_we0,
        d0 => grp_read_input_func_1_fu_24_input_buf_d0,
        q0 => input_buf_q0,
        address1 => grp_pooling_func_1_fu_32_input_buf_address1,
        ce1 => input_buf_ce1,
        q1 => input_buf_q1);

    grp_read_input_func_1_fu_24 : component cnn_top_read_input_func_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_input_func_1_fu_24_ap_start,
        ap_done => grp_read_input_func_1_fu_24_ap_done,
        ap_idle => grp_read_input_func_1_fu_24_ap_idle,
        ap_ready => grp_read_input_func_1_fu_24_ap_ready,
        conv2_out_dout => conv2_out_dout,
        conv2_out_empty_n => conv2_out_empty_n,
        conv2_out_read => grp_read_input_func_1_fu_24_conv2_out_read,
        conv2_out_num_data_valid => ap_const_lv14_0,
        conv2_out_fifo_cap => ap_const_lv14_0,
        input_buf_address0 => grp_read_input_func_1_fu_24_input_buf_address0,
        input_buf_ce0 => grp_read_input_func_1_fu_24_input_buf_ce0,
        input_buf_we0 => grp_read_input_func_1_fu_24_input_buf_we0,
        input_buf_d0 => grp_read_input_func_1_fu_24_input_buf_d0);

    grp_pooling_func_1_fu_32 : component cnn_top_pooling_func_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pooling_func_1_fu_32_ap_start,
        ap_done => grp_pooling_func_1_fu_32_ap_done,
        ap_idle => grp_pooling_func_1_fu_32_ap_idle,
        ap_ready => grp_pooling_func_1_fu_32_ap_ready,
        pool1_out_din => grp_pooling_func_1_fu_32_pool1_out_din,
        pool1_out_full_n => pool1_out_full_n,
        pool1_out_write => grp_pooling_func_1_fu_32_pool1_out_write,
        pool1_out_num_data_valid => pool1_out_num_data_valid,
        pool1_out_fifo_cap => pool1_out_fifo_cap,
        input_buf_address0 => grp_pooling_func_1_fu_32_input_buf_address0,
        input_buf_ce0 => grp_pooling_func_1_fu_32_input_buf_ce0,
        input_buf_q0 => input_buf_q0,
        input_buf_address1 => grp_pooling_func_1_fu_32_input_buf_address1,
        input_buf_ce1 => grp_pooling_func_1_fu_32_input_buf_ce1,
        input_buf_q1 => input_buf_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_pooling_func_1_fu_32_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_pooling_func_1_fu_32_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pooling_func_1_fu_32_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_pooling_func_1_fu_32_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pooling_func_1_fu_32_ap_ready = ap_const_logic_1)) then 
                    grp_pooling_func_1_fu_32_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_input_func_1_fu_24_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_read_input_func_1_fu_24_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_ignore_call3))) then 
                    grp_read_input_func_1_fu_24_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_input_func_1_fu_24_ap_ready = ap_const_logic_1)) then 
                    grp_read_input_func_1_fu_24_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, grp_read_input_func_1_fu_24_ap_done, grp_pooling_func_1_fu_32_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_read_input_func_1_fu_24_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_pooling_func_1_fu_32_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_read_input_func_1_fu_24_ap_done)
    begin
        if ((grp_read_input_func_1_fu_24_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_pooling_func_1_fu_32_ap_done)
    begin
        if ((grp_pooling_func_1_fu_32_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call3_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call3 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_pooling_func_1_fu_32_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_pooling_func_1_fu_32_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_pooling_func_1_fu_32_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_pooling_func_1_fu_32_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    conv2_out_read <= grp_read_input_func_1_fu_24_conv2_out_read;
    grp_pooling_func_1_fu_32_ap_start <= grp_pooling_func_1_fu_32_ap_start_reg;
    grp_read_input_func_1_fu_24_ap_start <= grp_read_input_func_1_fu_24_ap_start_reg;

    input_buf_address0_assign_proc : process(grp_read_input_func_1_fu_24_input_buf_address0, grp_pooling_func_1_fu_32_input_buf_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_buf_address0 <= grp_pooling_func_1_fu_32_input_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_buf_address0 <= grp_read_input_func_1_fu_24_input_buf_address0;
        else 
            input_buf_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    input_buf_ce0_assign_proc : process(grp_read_input_func_1_fu_24_input_buf_ce0, grp_pooling_func_1_fu_32_input_buf_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_buf_ce0 <= grp_pooling_func_1_fu_32_input_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_buf_ce0 <= grp_read_input_func_1_fu_24_input_buf_ce0;
        else 
            input_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_buf_ce1_assign_proc : process(grp_pooling_func_1_fu_32_input_buf_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_buf_ce1 <= grp_pooling_func_1_fu_32_input_buf_ce1;
        else 
            input_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_buf_we0_assign_proc : process(grp_read_input_func_1_fu_24_input_buf_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_buf_we0 <= grp_read_input_func_1_fu_24_input_buf_we0;
        else 
            input_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pool1_out_din <= grp_pooling_func_1_fu_32_pool1_out_din;
    pool1_out_write <= grp_pooling_func_1_fu_32_pool1_out_write;
end behav;
