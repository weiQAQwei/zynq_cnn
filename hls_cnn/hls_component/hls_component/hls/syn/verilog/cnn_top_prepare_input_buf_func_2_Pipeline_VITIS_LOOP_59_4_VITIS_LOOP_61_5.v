// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_top_prepare_input_buf_func_2_Pipeline_VITIS_LOOP_59_4_VITIS_LOOP_61_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_s_dout,
        input_s_empty_n,
        input_s_read,
        input_s_num_data_valid,
        input_s_fifo_cap,
        input_buf_2_2_address0,
        input_buf_2_2_ce0,
        input_buf_2_2_we0,
        input_buf_2_2_d0,
        input_buf_2_1_address0,
        input_buf_2_1_ce0,
        input_buf_2_1_we0,
        input_buf_2_1_d0,
        input_buf_2_0_address0,
        input_buf_2_0_ce0,
        input_buf_2_0_we0,
        input_buf_2_0_d0,
        input_buf_1_2_address0,
        input_buf_1_2_ce0,
        input_buf_1_2_we0,
        input_buf_1_2_d0,
        input_buf_1_1_address0,
        input_buf_1_1_ce0,
        input_buf_1_1_we0,
        input_buf_1_1_d0,
        input_buf_1_0_address0,
        input_buf_1_0_ce0,
        input_buf_1_0_we0,
        input_buf_1_0_d0,
        input_buf_0_2_address0,
        input_buf_0_2_ce0,
        input_buf_0_2_we0,
        input_buf_0_2_d0,
        input_buf_0_1_address0,
        input_buf_0_1_ce0,
        input_buf_0_1_we0,
        input_buf_0_1_d0,
        input_buf_0_0_address0,
        input_buf_0_0_ce0,
        input_buf_0_0_we0,
        input_buf_0_0_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] input_s_dout;
input   input_s_empty_n;
output   input_s_read;
input  [8:0] input_s_num_data_valid;
input  [8:0] input_s_fifo_cap;
output  [5:0] input_buf_2_2_address0;
output   input_buf_2_2_ce0;
output   input_buf_2_2_we0;
output  [15:0] input_buf_2_2_d0;
output  [5:0] input_buf_2_1_address0;
output   input_buf_2_1_ce0;
output   input_buf_2_1_we0;
output  [15:0] input_buf_2_1_d0;
output  [5:0] input_buf_2_0_address0;
output   input_buf_2_0_ce0;
output   input_buf_2_0_we0;
output  [15:0] input_buf_2_0_d0;
output  [5:0] input_buf_1_2_address0;
output   input_buf_1_2_ce0;
output   input_buf_1_2_we0;
output  [15:0] input_buf_1_2_d0;
output  [5:0] input_buf_1_1_address0;
output   input_buf_1_1_ce0;
output   input_buf_1_1_we0;
output  [15:0] input_buf_1_1_d0;
output  [5:0] input_buf_1_0_address0;
output   input_buf_1_0_ce0;
output   input_buf_1_0_we0;
output  [15:0] input_buf_1_0_d0;
output  [5:0] input_buf_0_2_address0;
output   input_buf_0_2_ce0;
output   input_buf_0_2_we0;
output  [15:0] input_buf_0_2_d0;
output  [5:0] input_buf_0_1_address0;
output   input_buf_0_1_ce0;
output   input_buf_0_1_we0;
output  [15:0] input_buf_0_1_d0;
output  [5:0] input_buf_0_0_address0;
output   input_buf_0_0_ce0;
output   input_buf_0_0_we0;
output  [15:0] input_buf_0_0_d0;

reg ap_idle;
reg input_s_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln59_fu_253_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_s_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [4:0] select_ln59_fu_277_p3;
wire   [4:0] select_ln59_2_fu_305_p3;
reg   [3:0] tmp_reg_493;
reg   [2:0] tmp_5_reg_498;
wire   [4:0] indvars_iv_next_fu_349_p2;
reg   [4:0] indvars_iv_next_reg_503;
wire   [5:0] add_ln64_fu_423_p2;
reg   [5:0] add_ln64_reg_508;
reg   [5:0] add_ln64_reg_508_pp0_iter2_reg;
reg   [5:0] add_ln64_reg_508_pp0_iter3_reg;
reg   [5:0] add_ln64_reg_508_pp0_iter4_reg;
reg   [5:0] add_ln64_reg_508_pp0_iter5_reg;
reg   [5:0] add_ln64_reg_508_pp0_iter6_reg;
reg   [5:0] add_ln64_reg_508_pp0_iter7_reg;
wire   [31:0] zext_ln64_7_fu_438_p1;
reg   [4:0] j_fu_84;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_1_fu_88;
reg   [4:0] ap_sig_allocacmp_i_1_load;
reg   [8:0] indvar_flatten6_fu_92;
wire   [8:0] add_ln59_fu_259_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    input_buf_1_1_we0_local;
wire   [1:0] empty_45_fu_429_p1;
wire   [1:0] trunc_ln64_fu_433_p1;
reg    input_buf_1_1_ce0_local;
reg    input_buf_1_2_we0_local;
reg    input_buf_1_2_ce0_local;
reg    input_buf_1_0_we0_local;
reg    input_buf_1_0_ce0_local;
reg    input_buf_2_1_we0_local;
reg    input_buf_2_1_ce0_local;
reg    input_buf_2_2_we0_local;
reg    input_buf_2_2_ce0_local;
reg    input_buf_2_0_we0_local;
reg    input_buf_2_0_ce0_local;
reg    input_buf_0_1_we0_local;
reg    input_buf_0_1_ce0_local;
reg    input_buf_0_2_we0_local;
reg    input_buf_0_2_ce0_local;
reg    input_buf_0_0_we0_local;
reg    input_buf_0_0_ce0_local;
wire   [0:0] icmp_ln61_fu_271_p2;
wire   [4:0] p_mid1_fu_285_p2;
wire   [4:0] empty_fu_291_p2;
wire   [4:0] select_ln59_1_fu_297_p3;
wire   [4:0] mul_ln61_fu_317_p0;
wire   [6:0] mul_ln61_fu_317_p1;
wire   [10:0] mul_ln61_fu_317_p2;
wire   [4:0] grp_fu_333_p0;
wire   [2:0] grp_fu_333_p1;
wire   [2:0] grp_fu_355_p1;
wire   [4:0] tmp_6_fu_376_p3;
wire   [5:0] tmp_7_fu_383_p3;
wire   [5:0] zext_ln64_fu_390_p1;
wire   [4:0] mul_ln64_fu_403_p0;
wire   [6:0] mul_ln64_fu_403_p1;
wire   [10:0] mul_ln64_fu_403_p2;
wire   [3:0] tmp_8_fu_409_p4;
wire   [5:0] sub_ln61_fu_394_p2;
wire   [5:0] zext_ln64_6_fu_419_p1;
wire   [1:0] grp_fu_333_p2;
wire   [1:0] grp_fu_355_p2;
reg    grp_fu_333_ce;
reg    grp_fu_355_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [10:0] mul_ln61_fu_317_p00;
wire   [10:0] mul_ln64_fu_403_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 j_fu_84 = 5'd0;
#0 i_1_fu_88 = 5'd0;
#0 indvar_flatten6_fu_92 = 9'd0;
#0 ap_done_reg = 1'b0;
end

cnn_top_mul_5ns_7ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
mul_5ns_7ns_11_1_1_U49(
    .din0(mul_ln61_fu_317_p0),
    .din1(mul_ln61_fu_317_p1),
    .dout(mul_ln61_fu_317_p2)
);

cnn_top_urem_5ns_3ns_2_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_5ns_3ns_2_9_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .din1(grp_fu_333_p1),
    .ce(grp_fu_333_ce),
    .dout(grp_fu_333_p2)
);

cnn_top_urem_5ns_3ns_2_9_1 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_5ns_3ns_2_9_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln59_fu_277_p3),
    .din1(grp_fu_355_p1),
    .ce(grp_fu_355_ce),
    .dout(grp_fu_355_p2)
);

cnn_top_mul_5ns_7ns_11_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
mul_5ns_7ns_11_1_1_U52(
    .din0(mul_ln64_fu_403_p0),
    .din1(mul_ln64_fu_403_p1),
    .dout(mul_ln64_fu_403_p2)
);

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln59_fu_253_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_88 <= select_ln59_2_fu_305_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_88 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln59_fu_253_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_92 <= add_ln59_fu_259_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_92 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln59_fu_253_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_84 <= indvars_iv_next_fu_349_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_84 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln64_reg_508 <= add_ln64_fu_423_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        indvars_iv_next_reg_503 <= indvars_iv_next_fu_349_p2;
        tmp_5_reg_498 <= {{mul_ln61_fu_317_p2[9:7]}};
        tmp_reg_493 <= {{mul_ln61_fu_317_p2[10:7]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln64_reg_508_pp0_iter2_reg <= add_ln64_reg_508;
        add_ln64_reg_508_pp0_iter3_reg <= add_ln64_reg_508_pp0_iter2_reg;
        add_ln64_reg_508_pp0_iter4_reg <= add_ln64_reg_508_pp0_iter3_reg;
        add_ln64_reg_508_pp0_iter5_reg <= add_ln64_reg_508_pp0_iter4_reg;
        add_ln64_reg_508_pp0_iter6_reg <= add_ln64_reg_508_pp0_iter5_reg;
        add_ln64_reg_508_pp0_iter7_reg <= add_ln64_reg_508_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (*) begin
    if (((icmp_ln59_fu_253_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter7_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1_load = i_1_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_333_ce = 1'b1;
    end else begin
        grp_fu_333_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_355_ce = 1'b1;
    end else begin
        grp_fu_355_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_0_0_ce0_local = 1'b1;
    end else begin
        input_buf_0_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(empty_45_fu_429_p1 == 2'd1) & ~(trunc_ln64_fu_433_p1 == 2'd1) & ~(trunc_ln64_fu_433_p1 == 2'd0) & ~(empty_45_fu_429_p1 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_0_0_we0_local = 1'b1;
    end else begin
        input_buf_0_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_0_1_ce0_local = 1'b1;
    end else begin
        input_buf_0_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(empty_45_fu_429_p1 == 2'd1) & ~(empty_45_fu_429_p1 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln64_fu_433_p1 == 2'd0))) begin
        input_buf_0_1_we0_local = 1'b1;
    end else begin
        input_buf_0_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_0_2_ce0_local = 1'b1;
    end else begin
        input_buf_0_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(empty_45_fu_429_p1 == 2'd1) & ~(empty_45_fu_429_p1 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln64_fu_433_p1 == 2'd1))) begin
        input_buf_0_2_we0_local = 1'b1;
    end else begin
        input_buf_0_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_1_0_ce0_local = 1'b1;
    end else begin
        input_buf_1_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln64_fu_433_p1 == 2'd1) & ~(trunc_ln64_fu_433_p1 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (empty_45_fu_429_p1 == 2'd0))) begin
        input_buf_1_0_we0_local = 1'b1;
    end else begin
        input_buf_1_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_1_1_ce0_local = 1'b1;
    end else begin
        input_buf_1_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln64_fu_433_p1 == 2'd0) & (empty_45_fu_429_p1 == 2'd0))) begin
        input_buf_1_1_we0_local = 1'b1;
    end else begin
        input_buf_1_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_1_2_ce0_local = 1'b1;
    end else begin
        input_buf_1_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln64_fu_433_p1 == 2'd1) & (empty_45_fu_429_p1 == 2'd0))) begin
        input_buf_1_2_we0_local = 1'b1;
    end else begin
        input_buf_1_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_2_0_ce0_local = 1'b1;
    end else begin
        input_buf_2_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln64_fu_433_p1 == 2'd1) & ~(trunc_ln64_fu_433_p1 == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (empty_45_fu_429_p1 == 2'd1))) begin
        input_buf_2_0_we0_local = 1'b1;
    end else begin
        input_buf_2_0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_2_1_ce0_local = 1'b1;
    end else begin
        input_buf_2_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln64_fu_433_p1 == 2'd0) & (empty_45_fu_429_p1 == 2'd1))) begin
        input_buf_2_1_we0_local = 1'b1;
    end else begin
        input_buf_2_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_buf_2_2_ce0_local = 1'b1;
    end else begin
        input_buf_2_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (trunc_ln64_fu_433_p1 == 2'd1) & (empty_45_fu_429_p1 == 2'd1))) begin
        input_buf_2_2_we0_local = 1'b1;
    end else begin
        input_buf_2_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_s_blk_n = input_s_empty_n;
    end else begin
        input_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        input_s_read = 1'b1;
    end else begin
        input_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln59_fu_259_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 9'd1);

assign add_ln64_fu_423_p2 = (sub_ln61_fu_394_p2 + zext_ln64_6_fu_419_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = (input_s_empty_n == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_45_fu_429_p1 = grp_fu_333_p2[1:0];

assign empty_fu_291_p2 = (ap_sig_allocacmp_i_1_load + 5'd1);

assign grp_fu_333_p0 = ((icmp_ln61_fu_271_p2[0:0] == 1'b1) ? empty_fu_291_p2 : ap_sig_allocacmp_i_1_load);

assign grp_fu_333_p1 = 5'd3;

assign grp_fu_355_p1 = 5'd3;

assign icmp_ln59_fu_253_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_271_p2 = ((ap_sig_allocacmp_j_load == 5'd16) ? 1'b1 : 1'b0);

assign indvars_iv_next_fu_349_p2 = (select_ln59_fu_277_p3 + 5'd1);

assign input_buf_0_0_address0 = zext_ln64_7_fu_438_p1;

assign input_buf_0_0_ce0 = input_buf_0_0_ce0_local;

assign input_buf_0_0_d0 = input_s_dout;

assign input_buf_0_0_we0 = input_buf_0_0_we0_local;

assign input_buf_0_1_address0 = zext_ln64_7_fu_438_p1;

assign input_buf_0_1_ce0 = input_buf_0_1_ce0_local;

assign input_buf_0_1_d0 = input_s_dout;

assign input_buf_0_1_we0 = input_buf_0_1_we0_local;

assign input_buf_0_2_address0 = zext_ln64_7_fu_438_p1;

assign input_buf_0_2_ce0 = input_buf_0_2_ce0_local;

assign input_buf_0_2_d0 = input_s_dout;

assign input_buf_0_2_we0 = input_buf_0_2_we0_local;

assign input_buf_1_0_address0 = zext_ln64_7_fu_438_p1;

assign input_buf_1_0_ce0 = input_buf_1_0_ce0_local;

assign input_buf_1_0_d0 = input_s_dout;

assign input_buf_1_0_we0 = input_buf_1_0_we0_local;

assign input_buf_1_1_address0 = zext_ln64_7_fu_438_p1;

assign input_buf_1_1_ce0 = input_buf_1_1_ce0_local;

assign input_buf_1_1_d0 = input_s_dout;

assign input_buf_1_1_we0 = input_buf_1_1_we0_local;

assign input_buf_1_2_address0 = zext_ln64_7_fu_438_p1;

assign input_buf_1_2_ce0 = input_buf_1_2_ce0_local;

assign input_buf_1_2_d0 = input_s_dout;

assign input_buf_1_2_we0 = input_buf_1_2_we0_local;

assign input_buf_2_0_address0 = zext_ln64_7_fu_438_p1;

assign input_buf_2_0_ce0 = input_buf_2_0_ce0_local;

assign input_buf_2_0_d0 = input_s_dout;

assign input_buf_2_0_we0 = input_buf_2_0_we0_local;

assign input_buf_2_1_address0 = zext_ln64_7_fu_438_p1;

assign input_buf_2_1_ce0 = input_buf_2_1_ce0_local;

assign input_buf_2_1_d0 = input_s_dout;

assign input_buf_2_1_we0 = input_buf_2_1_we0_local;

assign input_buf_2_2_address0 = zext_ln64_7_fu_438_p1;

assign input_buf_2_2_ce0 = input_buf_2_2_ce0_local;

assign input_buf_2_2_d0 = input_s_dout;

assign input_buf_2_2_we0 = input_buf_2_2_we0_local;

assign mul_ln61_fu_317_p0 = mul_ln61_fu_317_p00;

assign mul_ln61_fu_317_p00 = select_ln59_1_fu_297_p3;

assign mul_ln61_fu_317_p1 = 11'd43;

assign mul_ln64_fu_403_p0 = mul_ln64_fu_403_p00;

assign mul_ln64_fu_403_p00 = indvars_iv_next_reg_503;

assign mul_ln64_fu_403_p1 = 11'd43;

assign p_mid1_fu_285_p2 = (ap_sig_allocacmp_i_1_load + 5'd2);

assign select_ln59_1_fu_297_p3 = ((icmp_ln61_fu_271_p2[0:0] == 1'b1) ? p_mid1_fu_285_p2 : empty_fu_291_p2);

assign select_ln59_2_fu_305_p3 = ((icmp_ln61_fu_271_p2[0:0] == 1'b1) ? empty_fu_291_p2 : ap_sig_allocacmp_i_1_load);

assign select_ln59_fu_277_p3 = ((icmp_ln61_fu_271_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign sub_ln61_fu_394_p2 = (tmp_7_fu_383_p3 - zext_ln64_fu_390_p1);

assign tmp_6_fu_376_p3 = {{tmp_reg_493}, {1'd0}};

assign tmp_7_fu_383_p3 = {{tmp_5_reg_498}, {3'd0}};

assign tmp_8_fu_409_p4 = {{mul_ln64_fu_403_p2[10:7]}};

assign trunc_ln64_fu_433_p1 = grp_fu_355_p2[1:0];

assign zext_ln64_6_fu_419_p1 = tmp_8_fu_409_p4;

assign zext_ln64_7_fu_438_p1 = add_ln64_reg_508_pp0_iter7_reg;

assign zext_ln64_fu_390_p1 = tmp_6_fu_376_p3;

endmodule //cnn_top_prepare_input_buf_func_2_Pipeline_VITIS_LOOP_59_4_VITIS_LOOP_61_5
