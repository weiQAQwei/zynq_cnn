// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_top_prepare_input_buf_func_1_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_51_2_VITIS_LOOP_52_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_buf_address0,
        input_buf_ce0,
        input_buf_we0,
        input_buf_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [13:0] input_buf_address0;
output   input_buf_ce0;
output   input_buf_we0;
output  [15:0] input_buf_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln49_fu_118_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln51_fu_133_p2;
reg   [0:0] icmp_ln51_reg_375;
wire   [4:0] j_2_mid2_fu_220_p3;
reg   [4:0] j_2_mid2_reg_383;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln54_fu_272_p2;
reg   [9:0] add_ln54_reg_388;
wire   [31:0] zext_ln54_10_fu_332_p1;
reg   [4:0] j_fu_56;
wire   [4:0] add_ln52_fu_278_p2;
wire    ap_loop_init;
reg   [4:0] i_fu_60;
wire   [4:0] select_ln51_fu_228_p3;
reg   [9:0] indvar_flatten_fu_64;
wire   [9:0] select_ln51_2_fu_145_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [5:0] ic_fu_68;
wire   [5:0] select_ln49_1_fu_202_p3;
reg   [13:0] indvar_flatten12_fu_72;
wire   [13:0] add_ln49_1_fu_124_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten12_load;
reg    input_buf_we0_local;
reg    input_buf_ce0_local;
wire   [9:0] add_ln51_2_fu_139_p2;
wire   [0:0] icmp_ln52_fu_190_p2;
wire   [0:0] xor_ln49_fu_185_p2;
wire   [5:0] add_ln49_fu_172_p2;
wire   [4:0] select_ln49_fu_178_p3;
wire   [0:0] and_ln49_fu_196_p2;
wire   [0:0] empty_fu_215_p2;
wire   [4:0] add_ln51_fu_209_p2;
wire   [4:0] trunc_ln54_fu_236_p1;
wire   [8:0] tmp_fu_240_p3;
wire   [5:0] shl_ln54_fu_252_p2;
wire   [9:0] zext_ln54_fu_248_p1;
wire   [9:0] zext_ln54_7_fu_258_p1;
wire   [9:0] add_ln54_3_fu_262_p2;
wire   [9:0] zext_ln54_8_fu_268_p1;
wire   [10:0] tmp_16_fu_306_p3;
wire   [13:0] tmp_15_fu_299_p3;
wire   [13:0] zext_ln53_fu_313_p1;
wire   [13:0] add_ln53_fu_317_p2;
wire   [13:0] zext_ln54_9_fu_323_p1;
wire   [13:0] add_ln54_1_fu_326_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 j_fu_56 = 5'd0;
#0 i_fu_60 = 5'd0;
#0 indvar_flatten_fu_64 = 10'd0;
#0 ic_fu_68 = 6'd0;
#0 indvar_flatten12_fu_72 = 14'd0;
#0 ap_done_reg = 1'b0;
end

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_60 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_fu_60 <= select_ln51_fu_228_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ic_fu_68 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ic_fu_68 <= select_ln49_1_fu_202_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln49_fu_118_p2 == 1'd0)) begin
            indvar_flatten12_fu_72 <= add_ln49_1_fu_124_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_72 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln49_fu_118_p2 == 1'd0)) begin
            indvar_flatten_fu_64 <= select_ln51_2_fu_145_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_64 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_56 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_fu_56 <= add_ln52_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln54_reg_388 <= add_ln54_fu_272_p2;
        j_2_mid2_reg_383 <= j_2_mid2_fu_220_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln51_reg_375 <= icmp_ln51_fu_133_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln49_fu_118_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_72;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_64;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_buf_ce0_local = 1'b1;
    end else begin
        input_buf_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_buf_we0_local = 1'b1;
    end else begin
        input_buf_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln49_fu_118_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_1_fu_124_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 14'd1);

assign add_ln49_fu_172_p2 = (ic_fu_68 + 6'd1);

assign add_ln51_2_fu_139_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln51_fu_209_p2 = (select_ln49_fu_178_p3 + 5'd1);

assign add_ln52_fu_278_p2 = (j_2_mid2_fu_220_p3 + 5'd1);

assign add_ln53_fu_317_p2 = (tmp_15_fu_299_p3 + zext_ln53_fu_313_p1);

assign add_ln54_1_fu_326_p2 = (add_ln53_fu_317_p2 + zext_ln54_9_fu_323_p1);

assign add_ln54_3_fu_262_p2 = (zext_ln54_fu_248_p1 + zext_ln54_7_fu_258_p1);

assign add_ln54_fu_272_p2 = (add_ln54_3_fu_262_p2 + zext_ln54_8_fu_268_p1);

assign and_ln49_fu_196_p2 = (xor_ln49_fu_185_p2 & icmp_ln52_fu_190_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_fu_215_p2 = (icmp_ln51_reg_375 | and_ln49_fu_196_p2);

assign icmp_ln49_fu_118_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 14'd10368) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_133_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd324) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_190_p2 = ((j_fu_56 == 5'd18) ? 1'b1 : 1'b0);

assign input_buf_address0 = zext_ln54_10_fu_332_p1;

assign input_buf_ce0 = input_buf_ce0_local;

assign input_buf_d0 = 16'd0;

assign input_buf_we0 = input_buf_we0_local;

assign j_2_mid2_fu_220_p3 = ((empty_fu_215_p2[0:0] == 1'b1) ? 5'd0 : j_fu_56);

assign select_ln49_1_fu_202_p3 = ((icmp_ln51_reg_375[0:0] == 1'b1) ? add_ln49_fu_172_p2 : ic_fu_68);

assign select_ln49_fu_178_p3 = ((icmp_ln51_reg_375[0:0] == 1'b1) ? 5'd0 : i_fu_60);

assign select_ln51_2_fu_145_p3 = ((icmp_ln51_fu_133_p2[0:0] == 1'b1) ? 10'd1 : add_ln51_2_fu_139_p2);

assign select_ln51_fu_228_p3 = ((and_ln49_fu_196_p2[0:0] == 1'b1) ? add_ln51_fu_209_p2 : select_ln49_fu_178_p3);

assign shl_ln54_fu_252_p2 = select_ln49_1_fu_202_p3 << 6'd1;

assign tmp_15_fu_299_p3 = {{add_ln54_reg_388}, {4'd0}};

assign tmp_16_fu_306_p3 = {{add_ln54_reg_388}, {1'd0}};

assign tmp_fu_240_p3 = {{trunc_ln54_fu_236_p1}, {4'd0}};

assign trunc_ln54_fu_236_p1 = select_ln49_1_fu_202_p3[4:0];

assign xor_ln49_fu_185_p2 = (icmp_ln51_reg_375 ^ 1'd1);

assign zext_ln53_fu_313_p1 = tmp_16_fu_306_p3;

assign zext_ln54_10_fu_332_p1 = add_ln54_1_fu_326_p2;

assign zext_ln54_7_fu_258_p1 = shl_ln54_fu_252_p2;

assign zext_ln54_8_fu_268_p1 = select_ln51_fu_228_p3;

assign zext_ln54_9_fu_323_p1 = j_2_mid2_reg_383;

assign zext_ln54_fu_248_p1 = tmp_fu_240_p3;

endmodule //cnn_top_prepare_input_buf_func_1_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_51_2_VITIS_LOOP_52_s
