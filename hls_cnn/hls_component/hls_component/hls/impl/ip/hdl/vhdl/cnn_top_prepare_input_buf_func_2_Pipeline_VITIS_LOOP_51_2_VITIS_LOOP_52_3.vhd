-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_prepare_input_buf_func_2_Pipeline_VITIS_LOOP_51_2_VITIS_LOOP_52_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_buf_2_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_2_2_ce0 : OUT STD_LOGIC;
    input_buf_2_2_we0 : OUT STD_LOGIC;
    input_buf_2_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buf_2_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_2_1_ce0 : OUT STD_LOGIC;
    input_buf_2_1_we0 : OUT STD_LOGIC;
    input_buf_2_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buf_2_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_2_0_ce0 : OUT STD_LOGIC;
    input_buf_2_0_we0 : OUT STD_LOGIC;
    input_buf_2_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buf_1_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_1_2_ce0 : OUT STD_LOGIC;
    input_buf_1_2_we0 : OUT STD_LOGIC;
    input_buf_1_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buf_1_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_1_1_ce0 : OUT STD_LOGIC;
    input_buf_1_1_we0 : OUT STD_LOGIC;
    input_buf_1_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buf_1_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_1_0_ce0 : OUT STD_LOGIC;
    input_buf_1_0_we0 : OUT STD_LOGIC;
    input_buf_1_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buf_0_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_0_2_ce0 : OUT STD_LOGIC;
    input_buf_0_2_we0 : OUT STD_LOGIC;
    input_buf_0_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buf_0_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_0_1_ce0 : OUT STD_LOGIC;
    input_buf_0_1_we0 : OUT STD_LOGIC;
    input_buf_0_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_buf_0_0_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_buf_0_0_ce0 : OUT STD_LOGIC;
    input_buf_0_0_we0 : OUT STD_LOGIC;
    input_buf_0_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of cnn_top_prepare_input_buf_func_2_Pipeline_VITIS_LOOP_51_2_VITIS_LOOP_52_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_144 : STD_LOGIC_VECTOR (8 downto 0) := "101000100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv11_2B : STD_LOGIC_VECTOR (10 downto 0) := "00000101011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln51_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal icmp_ln51_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln51_reg_450_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_269_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln51_reg_454 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln51_reg_454_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln51_1_fu_277_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln51_1_reg_460 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln51_1_reg_460_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_reg_466 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal trunc_ln51_fu_355_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln51_reg_471 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln54_fu_398_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln54_reg_475 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln54_6_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal j_fu_76 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln52_fu_291_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_80 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_fu_84 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln51_1_fu_245_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal input_buf_1_1_we0_local : STD_LOGIC;
    signal trunc_ln52_fu_412_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal input_buf_1_1_ce0_local : STD_LOGIC;
    signal input_buf_1_0_we0_local : STD_LOGIC;
    signal input_buf_1_0_ce0_local : STD_LOGIC;
    signal input_buf_1_2_we0_local : STD_LOGIC;
    signal input_buf_1_2_ce0_local : STD_LOGIC;
    signal input_buf_0_1_we0_local : STD_LOGIC;
    signal input_buf_0_1_ce0_local : STD_LOGIC;
    signal input_buf_0_0_we0_local : STD_LOGIC;
    signal input_buf_0_0_ce0_local : STD_LOGIC;
    signal input_buf_0_2_we0_local : STD_LOGIC;
    signal input_buf_0_2_ce0_local : STD_LOGIC;
    signal input_buf_2_1_we0_local : STD_LOGIC;
    signal input_buf_2_1_ce0_local : STD_LOGIC;
    signal input_buf_2_0_we0_local : STD_LOGIC;
    signal input_buf_2_0_ce0_local : STD_LOGIC;
    signal input_buf_2_2_we0_local : STD_LOGIC;
    signal input_buf_2_2_ce0_local : STD_LOGIC;
    signal icmp_ln52_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln51_fu_257_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln52_fu_320_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln52_fu_320_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln52_fu_320_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln51_fu_339_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln51_fu_339_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln51_fu_339_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_345_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_359_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_369_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_377_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln54_fu_385_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln53_fu_389_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln54_5_fu_395_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_312_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal mul_ln51_fu_339_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln52_fu_320_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_urem_5ns_3ns_2_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component cnn_top_mul_5ns_7ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_5ns_3ns_2_9_1_U34 : component cnn_top_urem_5ns_3ns_2_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_285_p0,
        din1 => grp_fu_285_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);

    urem_5ns_3ns_2_9_1_U35 : component cnn_top_urem_5ns_3ns_2_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln51_reg_454,
        din1 => grp_fu_312_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_312_p2);

    mul_5ns_7ns_11_1_1_U36 : component cnn_top_mul_5ns_7ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => mul_ln52_fu_320_p0,
        din1 => mul_ln52_fu_320_p1,
        dout => mul_ln52_fu_320_p2);

    mul_5ns_7ns_11_1_1_U37 : component cnn_top_mul_5ns_7ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => mul_ln51_fu_339_p0,
        din1 => mul_ln51_fu_339_p1,
        dout => mul_ln51_fu_339_p2);

    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln51_fu_239_p2 = ap_const_lv1_0))) then 
                    i_fu_80 <= select_ln51_1_fu_277_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_80 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln51_fu_239_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_84 <= add_ln51_1_fu_245_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_84 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln51_fu_239_p2 = ap_const_lv1_0))) then 
                    j_fu_76 <= add_ln52_fu_291_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_76 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln54_reg_475 <= add_ln54_fu_398_p2;
                icmp_ln51_reg_450 <= icmp_ln51_fu_239_p2;
                icmp_ln51_reg_450_pp0_iter1_reg <= icmp_ln51_reg_450;
                select_ln51_1_reg_460 <= select_ln51_1_fu_277_p3;
                select_ln51_1_reg_460_pp0_iter1_reg <= select_ln51_1_reg_460;
                select_ln51_reg_454 <= select_ln51_fu_269_p3;
                select_ln51_reg_454_pp0_iter1_reg <= select_ln51_reg_454;
                trunc_ln51_reg_471 <= trunc_ln51_fu_355_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_12_reg_466 <= mul_ln52_fu_320_p2(10 downto 7);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter1_stage1, ap_idle_pp0_0to0, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to2, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln51_1_fu_245_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln51_fu_257_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv5_1));
    add_ln52_fu_291_p2 <= std_logic_vector(unsigned(select_ln51_fu_269_p3) + unsigned(ap_const_lv5_1));
    add_ln54_fu_398_p2 <= std_logic_vector(unsigned(sub_ln53_fu_389_p2) + unsigned(zext_ln54_5_fu_395_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln51_reg_450)
    begin
        if (((icmp_ln51_reg_450 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage1_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln51_reg_450_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln51_reg_450_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, i_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, indvar_flatten_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, j_fu_76, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_76;
        end if; 
    end process;

    grp_fu_285_p0 <= 
        add_ln51_fu_257_p2 when (icmp_ln52_fu_263_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    grp_fu_285_p1 <= ap_const_lv5_3(3 - 1 downto 0);
    grp_fu_312_p1 <= ap_const_lv5_3(3 - 1 downto 0);
    icmp_ln51_fu_239_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_144) else "0";
    icmp_ln52_fu_263_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv5_12) else "0";
    input_buf_0_0_address0 <= zext_ln54_6_fu_417_p1(6 - 1 downto 0);
    input_buf_0_0_ce0 <= input_buf_0_0_ce0_local;

    input_buf_0_0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_0_0_ce0_local <= ap_const_logic_1;
        else 
            input_buf_0_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_0_0_d0 <= ap_const_lv16_0;
    input_buf_0_0_we0 <= input_buf_0_0_we0_local;

    input_buf_0_0_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln51_reg_471, trunc_ln52_fu_412_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln52_fu_412_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln51_reg_471 = ap_const_lv2_0))) then 
            input_buf_0_0_we0_local <= ap_const_logic_1;
        else 
            input_buf_0_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_0_1_address0 <= zext_ln54_6_fu_417_p1(6 - 1 downto 0);
    input_buf_0_1_ce0 <= input_buf_0_1_ce0_local;

    input_buf_0_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_0_1_ce0_local <= ap_const_logic_1;
        else 
            input_buf_0_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_0_1_d0 <= ap_const_lv16_0;
    input_buf_0_1_we0 <= input_buf_0_1_we0_local;

    input_buf_0_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln51_reg_471, trunc_ln52_fu_412_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln52_fu_412_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln51_reg_471 = ap_const_lv2_0))) then 
            input_buf_0_1_we0_local <= ap_const_logic_1;
        else 
            input_buf_0_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_0_2_address0 <= zext_ln54_6_fu_417_p1(6 - 1 downto 0);
    input_buf_0_2_ce0 <= input_buf_0_2_ce0_local;

    input_buf_0_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_0_2_ce0_local <= ap_const_logic_1;
        else 
            input_buf_0_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_0_2_d0 <= ap_const_lv16_0;
    input_buf_0_2_we0 <= input_buf_0_2_we0_local;

    input_buf_0_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln51_reg_471, trunc_ln52_fu_412_p1)
    begin
        if ((not((trunc_ln52_fu_412_p1 = ap_const_lv2_0)) and not((trunc_ln52_fu_412_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln51_reg_471 = ap_const_lv2_0))) then 
            input_buf_0_2_we0_local <= ap_const_logic_1;
        else 
            input_buf_0_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_1_0_address0 <= zext_ln54_6_fu_417_p1(6 - 1 downto 0);
    input_buf_1_0_ce0 <= input_buf_1_0_ce0_local;

    input_buf_1_0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_1_0_ce0_local <= ap_const_logic_1;
        else 
            input_buf_1_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_1_0_d0 <= ap_const_lv16_0;
    input_buf_1_0_we0 <= input_buf_1_0_we0_local;

    input_buf_1_0_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln51_reg_471, trunc_ln52_fu_412_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln52_fu_412_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln51_reg_471 = ap_const_lv2_1))) then 
            input_buf_1_0_we0_local <= ap_const_logic_1;
        else 
            input_buf_1_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_1_1_address0 <= zext_ln54_6_fu_417_p1(6 - 1 downto 0);
    input_buf_1_1_ce0 <= input_buf_1_1_ce0_local;

    input_buf_1_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_1_1_ce0_local <= ap_const_logic_1;
        else 
            input_buf_1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_1_1_d0 <= ap_const_lv16_0;
    input_buf_1_1_we0 <= input_buf_1_1_we0_local;

    input_buf_1_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln51_reg_471, trunc_ln52_fu_412_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln52_fu_412_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln51_reg_471 = ap_const_lv2_1))) then 
            input_buf_1_1_we0_local <= ap_const_logic_1;
        else 
            input_buf_1_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_1_2_address0 <= zext_ln54_6_fu_417_p1(6 - 1 downto 0);
    input_buf_1_2_ce0 <= input_buf_1_2_ce0_local;

    input_buf_1_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_1_2_ce0_local <= ap_const_logic_1;
        else 
            input_buf_1_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_1_2_d0 <= ap_const_lv16_0;
    input_buf_1_2_we0 <= input_buf_1_2_we0_local;

    input_buf_1_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln51_reg_471, trunc_ln52_fu_412_p1)
    begin
        if ((not((trunc_ln52_fu_412_p1 = ap_const_lv2_0)) and not((trunc_ln52_fu_412_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln51_reg_471 = ap_const_lv2_1))) then 
            input_buf_1_2_we0_local <= ap_const_logic_1;
        else 
            input_buf_1_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_2_0_address0 <= zext_ln54_6_fu_417_p1(6 - 1 downto 0);
    input_buf_2_0_ce0 <= input_buf_2_0_ce0_local;

    input_buf_2_0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_2_0_ce0_local <= ap_const_logic_1;
        else 
            input_buf_2_0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_2_0_d0 <= ap_const_lv16_0;
    input_buf_2_0_we0 <= input_buf_2_0_we0_local;

    input_buf_2_0_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln51_reg_471, trunc_ln52_fu_412_p1)
    begin
        if ((not((trunc_ln51_reg_471 = ap_const_lv2_0)) and not((trunc_ln51_reg_471 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln52_fu_412_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_2_0_we0_local <= ap_const_logic_1;
        else 
            input_buf_2_0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_2_1_address0 <= zext_ln54_6_fu_417_p1(6 - 1 downto 0);
    input_buf_2_1_ce0 <= input_buf_2_1_ce0_local;

    input_buf_2_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_2_1_ce0_local <= ap_const_logic_1;
        else 
            input_buf_2_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_2_1_d0 <= ap_const_lv16_0;
    input_buf_2_1_we0 <= input_buf_2_1_we0_local;

    input_buf_2_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln51_reg_471, trunc_ln52_fu_412_p1)
    begin
        if ((not((trunc_ln51_reg_471 = ap_const_lv2_0)) and not((trunc_ln51_reg_471 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (trunc_ln52_fu_412_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_2_1_we0_local <= ap_const_logic_1;
        else 
            input_buf_2_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_2_2_address0 <= zext_ln54_6_fu_417_p1(6 - 1 downto 0);
    input_buf_2_2_ce0 <= input_buf_2_2_ce0_local;

    input_buf_2_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_2_2_ce0_local <= ap_const_logic_1;
        else 
            input_buf_2_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_2_2_d0 <= ap_const_lv16_0;
    input_buf_2_2_we0 <= input_buf_2_2_we0_local;

    input_buf_2_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln51_reg_471, trunc_ln52_fu_412_p1)
    begin
        if ((not((trunc_ln51_reg_471 = ap_const_lv2_0)) and not((trunc_ln52_fu_412_p1 = ap_const_lv2_0)) and not((trunc_ln52_fu_412_p1 = ap_const_lv2_1)) and not((trunc_ln51_reg_471 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            input_buf_2_2_we0_local <= ap_const_logic_1;
        else 
            input_buf_2_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln51_fu_339_p0 <= mul_ln51_fu_339_p00(5 - 1 downto 0);
    mul_ln51_fu_339_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_1_reg_460_pp0_iter1_reg),11));
    mul_ln51_fu_339_p1 <= ap_const_lv11_2B(7 - 1 downto 0);
    mul_ln52_fu_320_p0 <= mul_ln52_fu_320_p00(5 - 1 downto 0);
    mul_ln52_fu_320_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_454_pp0_iter1_reg),11));
    mul_ln52_fu_320_p1 <= ap_const_lv11_2B(7 - 1 downto 0);
    select_ln51_1_fu_277_p3 <= 
        add_ln51_fu_257_p2 when (icmp_ln52_fu_263_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln51_fu_269_p3 <= 
        ap_const_lv5_0 when (icmp_ln52_fu_263_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    sub_ln53_fu_389_p2 <= std_logic_vector(unsigned(tmp_11_fu_377_p3) - unsigned(zext_ln54_fu_385_p1));
    tmp_10_fu_369_p3 <= (tmp_fu_345_p4 & ap_const_lv1_0);
    tmp_11_fu_377_p3 <= (tmp_9_fu_359_p4 & ap_const_lv3_0);
    tmp_9_fu_359_p4 <= mul_ln51_fu_339_p2(9 downto 7);
    tmp_fu_345_p4 <= mul_ln51_fu_339_p2(10 downto 7);
    trunc_ln51_fu_355_p1 <= grp_fu_285_p2(2 - 1 downto 0);
    trunc_ln52_fu_412_p1 <= grp_fu_312_p2(2 - 1 downto 0);
    zext_ln54_5_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_466),6));
    zext_ln54_6_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln54_reg_475),32));
    zext_ln54_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_369_p3),6));
end behav;
