-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_load_params_func_1_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_VITIS_LOOP_30_3_VITI is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem4_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem4_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem4_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem4_0_WREADY : IN STD_LOGIC;
    m_axi_gmem4_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem4_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem4_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem4_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem4_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_RVALID : IN STD_LOGIC;
    m_axi_gmem4_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem4_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem4_0_RLAST : IN STD_LOGIC;
    m_axi_gmem4_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem4_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_BVALID : IN STD_LOGIC;
    m_axi_gmem4_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem4_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln26 : IN STD_LOGIC_VECTOR (30 downto 0);
    local_weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    local_weights_ce0 : OUT STD_LOGIC;
    local_weights_we0 : OUT STD_LOGIC;
    local_weights_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of cnn_top_load_params_func_1_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_VITIS_LOOP_30_3_VITI is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_2400 : STD_LOGIC_VECTOR (13 downto 0) := "10010000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv10_120 : STD_LOGIC_VECTOR (9 downto 0) := "0100100000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln26_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem4_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln28_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_539 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln26_1_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln26_1_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_mid2_fu_364_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal n_mid2_reg_568 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal add_ln34_fu_420_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln34_reg_573 : STD_LOGIC_VECTOR (11 downto 0);
    signal gmem4_addr_read_reg_579 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln34_8_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_fu_78 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln31_fu_426_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal m_fu_82 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal select_ln30_fu_372_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_86 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln30_2_fu_232_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (3 downto 0);
    signal ic_fu_90 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln28_fu_341_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten12_fu_94 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln28_1_fu_246_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten12_load : STD_LOGIC_VECTOR (9 downto 0);
    signal oc_fu_98 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln26_2_fu_300_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten35_fu_102 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln26_2_fu_178_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten35_load : STD_LOGIC_VECTOR (13 downto 0);
    signal local_weights_we0_local : STD_LOGIC;
    signal local_weights_ce0_local : STD_LOGIC;
    signal add_ln30_2_fu_226_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_1_fu_240_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_fu_281_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln26_fu_287_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_flatten_not_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_mid234_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln26_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_307_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal m_mid26_fu_313_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln31_mid211_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_56_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln30_fu_348_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln34_fu_380_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln34_2_fu_384_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_388_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_fu_400_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln34_fu_396_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln34_fu_410_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln34_5_fu_416_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_fu_455_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_6_fu_452_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln34_2_fu_462_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln34_7_fu_468_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln34_1_fu_471_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ic_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                ic_fu_90 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ic_fu_90 <= select_ln28_fu_341_p3;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln26_fu_172_p2 = ap_const_lv1_0)) then 
                    indvar_flatten12_fu_94 <= select_ln28_1_fu_246_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_94 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten35_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln26_fu_172_p2 = ap_const_lv1_0)) then 
                    indvar_flatten35_fu_102 <= add_ln26_2_fu_178_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten35_fu_102 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln26_fu_172_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_86 <= select_ln30_2_fu_232_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_86 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    m_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                m_fu_82 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                m_fu_82 <= select_ln30_fu_372_p3;
            end if; 
        end if;
    end process;

    n_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                n_fu_78 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n_fu_78 <= add_ln31_fu_426_p2;
            end if; 
        end if;
    end process;

    oc_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                oc_fu_98 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                oc_fu_98 <= select_ln26_2_fu_300_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln34_reg_573 <= add_ln34_fu_420_p2;
                gmem4_addr_read_reg_579 <= m_axi_gmem4_0_RDATA;
                n_mid2_reg_568 <= n_mid2_fu_364_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                and_ln26_1_reg_557 <= and_ln26_1_fu_214_p2;
                empty_reg_563 <= empty_fu_220_p2;
                icmp_ln28_reg_539 <= icmp_ln28_fu_196_p2;
                icmp_ln30_reg_552 <= icmp_ln30_fu_208_p2;
                xor_ln26_reg_547 <= xor_ln26_fu_202_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln26_fu_172_p2, ap_CS_fsm_state2, ap_block_state2_pp0_stage1_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln26_fu_172_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln26_2_fu_178_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten35_load) + unsigned(ap_const_lv14_1));
    add_ln26_fu_281_p2 <= std_logic_vector(unsigned(oc_fu_98) + unsigned(ap_const_lv6_1));
    add_ln28_1_fu_240_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten12_load) + unsigned(ap_const_lv10_1));
    add_ln28_fu_307_p2 <= std_logic_vector(unsigned(select_ln26_fu_287_p3) + unsigned(ap_const_lv6_1));
    add_ln30_2_fu_226_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv4_1));
    add_ln30_fu_348_p2 <= std_logic_vector(unsigned(m_mid26_fu_313_p3) + unsigned(ap_const_lv2_1));
    add_ln31_fu_426_p2 <= std_logic_vector(unsigned(n_mid2_fu_364_p3) + unsigned(ap_const_lv2_1));
    add_ln34_1_fu_471_p2 <= std_logic_vector(unsigned(sub_ln34_2_fu_462_p2) + unsigned(zext_ln34_7_fu_468_p1));
    add_ln34_fu_420_p2 <= std_logic_vector(unsigned(sub_ln34_fu_410_p2) + unsigned(zext_ln34_5_fu_416_p1));
    and_ln26_1_fu_214_p2 <= (xor_ln26_fu_202_p2 and icmp_ln30_fu_208_p2);
    and_ln26_fu_330_p2 <= (xor_ln26_reg_547 and not_exitcond_flatten_mid234_fu_325_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_pp0_stage1_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(m_axi_gmem4_0_RVALID)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (m_axi_gmem4_0_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln26_fu_172_p2)
    begin
        if (((icmp_ln26_fu_172_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten12_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten12_fu_94)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten12_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten12_load <= indvar_flatten12_fu_94;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten35_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten35_fu_102)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten35_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten35_load <= indvar_flatten35_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten_fu_86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_86;
        end if; 
    end process;

    empty_56_fu_354_p2 <= (icmp_ln31_mid211_fu_335_p2 or and_ln26_1_reg_557);
    empty_57_fu_359_p2 <= (icmp_ln28_reg_539 or empty_56_fu_354_p2);
    empty_fu_220_p2 <= (icmp_ln28_fu_196_p2 or and_ln26_1_fu_214_p2);
    exitcond_flatten_not_fu_320_p2 <= (icmp_ln30_reg_552 xor ap_const_lv1_1);

    gmem4_blk_n_R_assign_proc : process(m_axi_gmem4_0_RVALID, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem4_blk_n_R <= m_axi_gmem4_0_RVALID;
        else 
            gmem4_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln26_fu_172_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten35_load = ap_const_lv14_2400) else "0";
    icmp_ln28_fu_196_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten12_load = ap_const_lv10_120) else "0";
    icmp_ln30_fu_208_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv4_9) else "0";
    icmp_ln31_fu_294_p2 <= "1" when (n_fu_78 = ap_const_lv2_3) else "0";
    icmp_ln31_mid211_fu_335_p2 <= (icmp_ln31_fu_294_p2 and and_ln26_fu_330_p2);
    local_weights_address0 <= zext_ln34_8_fu_477_p1(14 - 1 downto 0);
    local_weights_ce0 <= local_weights_ce0_local;

    local_weights_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_weights_ce0_local <= ap_const_logic_1;
        else 
            local_weights_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    local_weights_d0 <= gmem4_addr_read_reg_579;
    local_weights_we0 <= local_weights_we0_local;

    local_weights_we0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_weights_we0_local <= ap_const_logic_1;
        else 
            local_weights_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_0_ARADDR <= ap_const_lv32_0;
    m_axi_gmem4_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem4_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem4_0_ARID <= ap_const_lv1_0;
    m_axi_gmem4_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem4_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem4_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem4_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem4_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem4_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem4_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem4_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem4_0_AWADDR <= ap_const_lv32_0;
    m_axi_gmem4_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem4_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem4_0_AWID <= ap_const_lv1_0;
    m_axi_gmem4_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem4_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem4_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem4_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem4_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem4_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem4_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem4_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem4_0_BREADY <= ap_const_logic_0;

    m_axi_gmem4_0_RREADY_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_pp0_stage1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem4_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem4_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_0_WDATA <= ap_const_lv16_0;
    m_axi_gmem4_0_WID <= ap_const_lv1_0;
    m_axi_gmem4_0_WLAST <= ap_const_logic_0;
    m_axi_gmem4_0_WSTRB <= ap_const_lv2_0;
    m_axi_gmem4_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem4_0_WVALID <= ap_const_logic_0;
    m_mid26_fu_313_p3 <= 
        ap_const_lv2_0 when (empty_reg_563(0) = '1') else 
        m_fu_82;
    n_mid2_fu_364_p3 <= 
        ap_const_lv2_0 when (empty_57_fu_359_p2(0) = '1') else 
        n_fu_78;
    not_exitcond_flatten_mid234_fu_325_p2 <= (icmp_ln28_reg_539 or exitcond_flatten_not_fu_320_p2);
    p_shl2_fu_400_p4 <= ((trunc_ln34_fu_380_p1 & trunc_ln34_2_fu_384_p1) & ap_const_lv2_0);
    p_shl_fu_455_p3 <= (add_ln34_reg_573 & ap_const_lv2_0);
    select_ln26_2_fu_300_p3 <= 
        add_ln26_fu_281_p2 when (icmp_ln28_reg_539(0) = '1') else 
        oc_fu_98;
    select_ln26_fu_287_p3 <= 
        ap_const_lv6_0 when (icmp_ln28_reg_539(0) = '1') else 
        ic_fu_90;
    select_ln28_1_fu_246_p3 <= 
        ap_const_lv10_1 when (icmp_ln28_fu_196_p2(0) = '1') else 
        add_ln28_1_fu_240_p2;
    select_ln28_fu_341_p3 <= 
        add_ln28_fu_307_p2 when (and_ln26_1_reg_557(0) = '1') else 
        select_ln26_fu_287_p3;
    select_ln30_2_fu_232_p3 <= 
        ap_const_lv4_1 when (empty_fu_220_p2(0) = '1') else 
        add_ln30_2_fu_226_p2;
    select_ln30_fu_372_p3 <= 
        add_ln30_fu_348_p2 when (icmp_ln31_mid211_fu_335_p2(0) = '1') else 
        m_mid26_fu_313_p3;
    sub_ln34_2_fu_462_p2 <= std_logic_vector(unsigned(p_shl_fu_455_p3) - unsigned(zext_ln34_6_fu_452_p1));
    sub_ln34_fu_410_p2 <= std_logic_vector(unsigned(p_shl2_fu_400_p4) - unsigned(zext_ln34_fu_396_p1));
    tmp_s_fu_388_p3 <= (trunc_ln34_fu_380_p1 & trunc_ln34_2_fu_384_p1);
    trunc_ln34_2_fu_384_p1 <= select_ln28_fu_341_p3(5 - 1 downto 0);
    trunc_ln34_fu_380_p1 <= select_ln26_2_fu_300_p3(5 - 1 downto 0);
    xor_ln26_fu_202_p2 <= (icmp_ln28_fu_196_p2 xor ap_const_lv1_1);
    zext_ln34_5_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_fu_372_p3),12));
    zext_ln34_6_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_reg_573),14));
    zext_ln34_7_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_mid2_reg_568),14));
    zext_ln34_8_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_1_fu_471_p2),32));
    zext_ln34_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_388_p3),12));
end behav;
