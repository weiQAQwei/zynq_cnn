-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_load_params_func_2_Pipeline_VITIS_LOOP_40_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem3_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_0_WREADY : IN STD_LOGIC;
    m_axi_gmem3_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem3_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_0_RVALID : IN STD_LOGIC;
    m_axi_gmem3_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem3_0_RLAST : IN STD_LOGIC;
    m_axi_gmem3_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem3_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_0_BVALID : IN STD_LOGIC;
    m_axi_gmem3_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln40 : IN STD_LOGIC_VECTOR (30 downto 0);
    local_bias_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    local_bias_ce0 : OUT STD_LOGIC;
    local_bias_we0 : OUT STD_LOGIC;
    local_bias_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of cnn_top_load_params_func_2_Pipeline_VITIS_LOOP_40_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln40_fu_88_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem3_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln42_fu_106_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln42_reg_134 : STD_LOGIC_VECTOR (4 downto 0);
    signal gmem3_addr_read_reg_139 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal zext_ln42_fu_115_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal oc_1_fu_48 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln40_fu_94_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_oc : STD_LOGIC_VECTOR (5 downto 0);
    signal local_bias_we0_local : STD_LOGIC;
    signal local_bias_ce0_local : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    oc_1_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln40_fu_88_p2 = ap_const_lv1_0)) then 
                    oc_1_fu_48 <= add_ln40_fu_94_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    oc_1_fu_48 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                gmem3_addr_read_reg_139 <= m_axi_gmem3_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln42_reg_134 <= trunc_ln42_fu_106_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_88_p2, ap_CS_fsm_state2, ap_block_state2_pp0_stage1_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln40_fu_88_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln40_fu_94_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_oc) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_pp0_stage1_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(m_axi_gmem3_0_RVALID)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (m_axi_gmem3_0_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln40_fu_88_p2)
    begin
        if (((icmp_ln40_fu_88_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_oc_assign_proc : process(ap_CS_fsm_state1, oc_1_fu_48, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_oc <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_oc <= oc_1_fu_48;
        end if; 
    end process;


    gmem3_blk_n_R_assign_proc : process(m_axi_gmem3_0_RVALID, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem3_blk_n_R <= m_axi_gmem3_0_RVALID;
        else 
            gmem3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln40_fu_88_p2 <= "1" when (ap_sig_allocacmp_oc = ap_const_lv6_20) else "0";
    local_bias_address0 <= zext_ln42_fu_115_p1(5 - 1 downto 0);
    local_bias_ce0 <= local_bias_ce0_local;

    local_bias_ce0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_bias_ce0_local <= ap_const_logic_1;
        else 
            local_bias_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    local_bias_d0 <= gmem3_addr_read_reg_139;
    local_bias_we0 <= local_bias_we0_local;

    local_bias_we0_local_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_bias_we0_local <= ap_const_logic_1;
        else 
            local_bias_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem3_0_ARADDR <= ap_const_lv32_0;
    m_axi_gmem3_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem3_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem3_0_ARID <= ap_const_lv1_0;
    m_axi_gmem3_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem3_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem3_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem3_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem3_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem3_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem3_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem3_0_ARVALID <= ap_const_logic_0;
    m_axi_gmem3_0_AWADDR <= ap_const_lv32_0;
    m_axi_gmem3_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem3_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem3_0_AWID <= ap_const_lv1_0;
    m_axi_gmem3_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem3_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem3_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem3_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem3_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem3_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem3_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem3_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem3_0_BREADY <= ap_const_logic_0;

    m_axi_gmem3_0_RREADY_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_pp0_stage1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_pp0_stage1_iter0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem3_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem3_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem3_0_WDATA <= ap_const_lv16_0;
    m_axi_gmem3_0_WID <= ap_const_lv1_0;
    m_axi_gmem3_0_WLAST <= ap_const_logic_0;
    m_axi_gmem3_0_WSTRB <= ap_const_lv2_0;
    m_axi_gmem3_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem3_0_WVALID <= ap_const_logic_0;
    trunc_ln42_fu_106_p1 <= ap_sig_allocacmp_oc(5 - 1 downto 0);
    zext_ln42_fu_115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln42_reg_134),32));
end behav;
