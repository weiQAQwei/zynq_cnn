-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_prepare_input_buf_func_Pipeline_VITIS_LOOP_59_4_VITIS_LOOP_61_5_VITIS_LOOP_62_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pool1_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    pool1_out_empty_n : IN STD_LOGIC;
    pool1_out_read : OUT STD_LOGIC;
    pool1_out_num_data_valid : IN STD_LOGIC_VECTOR (11 downto 0);
    pool1_out_fifo_cap : IN STD_LOGIC_VECTOR (11 downto 0);
    input_buf_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_buf_ce0 : OUT STD_LOGIC;
    input_buf_we0 : OUT STD_LOGIC;
    input_buf_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of cnn_top_prepare_input_buf_func_Pipeline_VITIS_LOOP_59_4_VITIS_LOOP_61_5_VITIS_LOOP_62_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln59_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal pool1_out_blk_n : STD_LOGIC;
    signal select_ln61_1_fu_263_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln61_1_reg_437 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln64_fu_315_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln64_reg_442 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln64_4_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ic_fu_66 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln62_fu_321_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_70 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln61_2_fu_271_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten19_fu_74 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln61_3_fu_333_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_78 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln59_3_fu_229_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten33_fu_82 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln59_fu_140_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten33_load : STD_LOGIC_VECTOR (11 downto 0);
    signal input_buf_we0_local : STD_LOGIC;
    signal input_buf_ce0_local : STD_LOGIC;
    signal icmp_ln61_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid1_fu_177_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_183_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next223_fu_197_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln62_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln59_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_fu_169_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln59_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln61_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next2_mid1_fu_257_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln59_2_fu_203_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_next2_dup_fu_237_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln59_1_fu_189_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln61_fu_249_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln64_fu_283_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_287_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln64_fu_299_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln64_1_fu_295_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln64_2_fu_305_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln64_1_fu_309_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln64_fu_279_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln61_fu_327_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_371_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_364_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln64_3_fu_378_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln64_3_fu_382_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln63_fu_361_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln64_2_fu_388_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_78 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_fu_78 <= select_ln59_3_fu_229_p3;
            end if; 
        end if;
    end process;

    ic_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ic_fu_66 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                ic_fu_66 <= add_ln62_fu_321_p2;
            end if; 
        end if;
    end process;

    indvar_flatten19_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten19_fu_74 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten19_fu_74 <= select_ln61_3_fu_333_p3;
            end if; 
        end if;
    end process;

    indvar_flatten33_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln59_fu_134_p2 = ap_const_lv1_0)) then 
                    indvar_flatten33_fu_82 <= add_ln59_fu_140_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten33_fu_82 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_fu_70 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                j_fu_70 <= select_ln61_2_fu_271_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln64_reg_442 <= add_ln64_fu_315_p2;
                select_ln61_1_reg_437 <= select_ln61_1_fu_263_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln59_fu_134_p2, ap_CS_fsm_state3, ap_block_state3_pp0_stage2_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln59_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_pp0_stage2_iter0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln59_fu_140_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten33_load) + unsigned(ap_const_lv12_1));
    add_ln61_fu_327_p2 <= std_logic_vector(unsigned(indvar_flatten19_fu_74) + unsigned(ap_const_lv10_1));
    add_ln62_fu_321_p2 <= std_logic_vector(unsigned(select_ln61_fu_249_p3) + unsigned(ap_const_lv6_1));
    add_ln64_1_fu_309_p2 <= std_logic_vector(unsigned(zext_ln64_1_fu_295_p1) + unsigned(zext_ln64_2_fu_305_p1));
    add_ln64_2_fu_388_p2 <= std_logic_vector(unsigned(add_ln64_3_fu_382_p2) + unsigned(zext_ln63_fu_361_p1));
    add_ln64_3_fu_382_p2 <= std_logic_vector(unsigned(tmp_1_fu_364_p3) + unsigned(zext_ln64_3_fu_378_p1));
    add_ln64_fu_315_p2 <= std_logic_vector(unsigned(add_ln64_1_fu_309_p2) + unsigned(zext_ln64_fu_279_p1));
    and_ln59_fu_223_p2 <= (xor_ln59_fu_211_p2 and icmp_ln62_fu_217_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_pp0_stage2_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(pool1_out_empty_n)
    begin
                ap_block_state3_pp0_stage2_iter0 <= (pool1_out_empty_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln59_fu_134_p2)
    begin
        if (((icmp_ln59_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_pp0_stage2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_pp0_stage2_iter0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten33_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten33_fu_82)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_indvar_flatten33_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten33_load <= indvar_flatten33_fu_82;
        end if; 
    end process;

    empty_fu_183_p2 <= std_logic_vector(unsigned(i_fu_78) + unsigned(ap_const_lv4_1));
    icmp_ln59_fu_134_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten33_load = ap_const_lv12_800) else "0";
    icmp_ln61_fu_163_p2 <= "1" when (indvar_flatten19_fu_74 = ap_const_lv10_100) else "0";
    icmp_ln62_fu_217_p2 <= "1" when (ic_fu_66 = ap_const_lv6_20) else "0";
    indvars_iv_next223_fu_197_p2 <= std_logic_vector(unsigned(j_fu_70) + unsigned(ap_const_lv4_1));
    indvars_iv_next2_dup_fu_237_p2 <= std_logic_vector(unsigned(select_ln59_fu_169_p3) + unsigned(ap_const_lv4_1));
    indvars_iv_next2_mid1_fu_257_p2 <= std_logic_vector(unsigned(select_ln59_fu_169_p3) + unsigned(ap_const_lv4_2));
    input_buf_address0 <= zext_ln64_4_fu_394_p1(12 - 1 downto 0);
    input_buf_ce0 <= input_buf_ce0_local;

    input_buf_ce0_local_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_pp0_stage2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_pp0_stage2_iter0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_buf_ce0_local <= ap_const_logic_1;
        else 
            input_buf_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_d0 <= pool1_out_dout;
    input_buf_we0 <= input_buf_we0_local;

    input_buf_we0_local_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_pp0_stage2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_pp0_stage2_iter0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            input_buf_we0_local <= ap_const_logic_1;
        else 
            input_buf_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    or_ln61_fu_243_p2 <= (icmp_ln61_fu_163_p2 or and_ln59_fu_223_p2);
    p_mid1_fu_177_p2 <= std_logic_vector(unsigned(i_fu_78) + unsigned(ap_const_lv4_2));

    pool1_out_blk_n_assign_proc : process(ap_CS_fsm_state3, pool1_out_empty_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            pool1_out_blk_n <= pool1_out_empty_n;
        else 
            pool1_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    pool1_out_read_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_pp0_stage2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_pp0_stage2_iter0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            pool1_out_read <= ap_const_logic_1;
        else 
            pool1_out_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln59_1_fu_189_p3 <= 
        p_mid1_fu_177_p2 when (icmp_ln61_fu_163_p2(0) = '1') else 
        empty_fu_183_p2;
    select_ln59_2_fu_203_p3 <= 
        ap_const_lv4_1 when (icmp_ln61_fu_163_p2(0) = '1') else 
        indvars_iv_next223_fu_197_p2;
    select_ln59_3_fu_229_p3 <= 
        empty_fu_183_p2 when (icmp_ln61_fu_163_p2(0) = '1') else 
        i_fu_78;
    select_ln59_fu_169_p3 <= 
        ap_const_lv4_0 when (icmp_ln61_fu_163_p2(0) = '1') else 
        j_fu_70;
    select_ln61_1_fu_263_p3 <= 
        indvars_iv_next2_mid1_fu_257_p2 when (and_ln59_fu_223_p2(0) = '1') else 
        select_ln59_2_fu_203_p3;
    select_ln61_2_fu_271_p3 <= 
        indvars_iv_next2_dup_fu_237_p2 when (and_ln59_fu_223_p2(0) = '1') else 
        select_ln59_fu_169_p3;
    select_ln61_3_fu_333_p3 <= 
        ap_const_lv10_1 when (icmp_ln61_fu_163_p2(0) = '1') else 
        add_ln61_fu_327_p2;
    select_ln61_fu_249_p3 <= 
        ap_const_lv6_0 when (or_ln61_fu_243_p2(0) = '1') else 
        ic_fu_66;
    shl_ln64_fu_299_p2 <= std_logic_vector(shift_left(unsigned(select_ln61_fu_249_p3),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    tmp_1_fu_364_p3 <= (add_ln64_reg_442 & ap_const_lv3_0);
    tmp_2_fu_371_p3 <= (add_ln64_reg_442 & ap_const_lv1_0);
    tmp_fu_287_p3 <= (trunc_ln64_fu_283_p1 & ap_const_lv3_0);
    trunc_ln64_fu_283_p1 <= select_ln61_fu_249_p3(5 - 1 downto 0);
    xor_ln59_fu_211_p2 <= (icmp_ln61_fu_163_p2 xor ap_const_lv1_1);
    zext_ln63_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln61_1_reg_437),12));
    zext_ln64_1_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_287_p3),9));
    zext_ln64_2_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln64_fu_299_p2),9));
    zext_ln64_3_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_371_p3),12));
    zext_ln64_4_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln64_2_fu_388_p2),32));
    zext_ln64_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln59_1_fu_189_p3),9));
end behav;
