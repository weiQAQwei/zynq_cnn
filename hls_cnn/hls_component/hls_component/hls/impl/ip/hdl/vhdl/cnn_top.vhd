-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM4_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM4_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM5_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM5_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM5_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM5_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM5_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM5_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM5_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM5_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM6_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM6_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM6_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM7_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM7_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM7_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM4_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM4_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM4_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM5_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM5_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM5_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM6_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM6_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM6_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM7_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM7_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM7_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    m_axi_gmem4_AWVALID : OUT STD_LOGIC;
    m_axi_gmem4_AWREADY : IN STD_LOGIC;
    m_axi_gmem4_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem4_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem4_WVALID : OUT STD_LOGIC;
    m_axi_gmem4_WREADY : IN STD_LOGIC;
    m_axi_gmem4_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH-1 downto 0);
    m_axi_gmem4_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem4_WLAST : OUT STD_LOGIC;
    m_axi_gmem4_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_WUSER_WIDTH-1 downto 0);
    m_axi_gmem4_ARVALID : OUT STD_LOGIC;
    m_axi_gmem4_ARREADY : IN STD_LOGIC;
    m_axi_gmem4_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem4_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem4_RVALID : IN STD_LOGIC;
    m_axi_gmem4_RREADY : OUT STD_LOGIC;
    m_axi_gmem4_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH-1 downto 0);
    m_axi_gmem4_RLAST : IN STD_LOGIC;
    m_axi_gmem4_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_RUSER_WIDTH-1 downto 0);
    m_axi_gmem4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BVALID : IN STD_LOGIC;
    m_axi_gmem4_BREADY : OUT STD_LOGIC;
    m_axi_gmem4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_BUSER_WIDTH-1 downto 0);
    m_axi_gmem5_AWVALID : OUT STD_LOGIC;
    m_axi_gmem5_AWREADY : IN STD_LOGIC;
    m_axi_gmem5_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_ADDR_WIDTH-1 downto 0);
    m_axi_gmem5_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_ID_WIDTH-1 downto 0);
    m_axi_gmem5_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem5_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem5_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem5_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem5_WVALID : OUT STD_LOGIC;
    m_axi_gmem5_WREADY : IN STD_LOGIC;
    m_axi_gmem5_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_DATA_WIDTH-1 downto 0);
    m_axi_gmem5_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem5_WLAST : OUT STD_LOGIC;
    m_axi_gmem5_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_ID_WIDTH-1 downto 0);
    m_axi_gmem5_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_WUSER_WIDTH-1 downto 0);
    m_axi_gmem5_ARVALID : OUT STD_LOGIC;
    m_axi_gmem5_ARREADY : IN STD_LOGIC;
    m_axi_gmem5_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_ADDR_WIDTH-1 downto 0);
    m_axi_gmem5_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_ID_WIDTH-1 downto 0);
    m_axi_gmem5_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem5_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem5_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem5_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem5_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM5_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem5_RVALID : IN STD_LOGIC;
    m_axi_gmem5_RREADY : OUT STD_LOGIC;
    m_axi_gmem5_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM5_DATA_WIDTH-1 downto 0);
    m_axi_gmem5_RLAST : IN STD_LOGIC;
    m_axi_gmem5_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM5_ID_WIDTH-1 downto 0);
    m_axi_gmem5_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM5_RUSER_WIDTH-1 downto 0);
    m_axi_gmem5_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_BVALID : IN STD_LOGIC;
    m_axi_gmem5_BREADY : OUT STD_LOGIC;
    m_axi_gmem5_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem5_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM5_ID_WIDTH-1 downto 0);
    m_axi_gmem5_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM5_BUSER_WIDTH-1 downto 0);
    m_axi_gmem6_AWVALID : OUT STD_LOGIC;
    m_axi_gmem6_AWREADY : IN STD_LOGIC;
    m_axi_gmem6_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ADDR_WIDTH-1 downto 0);
    m_axi_gmem6_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem6_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem6_WVALID : OUT STD_LOGIC;
    m_axi_gmem6_WREADY : IN STD_LOGIC;
    m_axi_gmem6_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_DATA_WIDTH-1 downto 0);
    m_axi_gmem6_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem6_WLAST : OUT STD_LOGIC;
    m_axi_gmem6_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_WUSER_WIDTH-1 downto 0);
    m_axi_gmem6_ARVALID : OUT STD_LOGIC;
    m_axi_gmem6_ARREADY : IN STD_LOGIC;
    m_axi_gmem6_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ADDR_WIDTH-1 downto 0);
    m_axi_gmem6_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem6_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem6_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem6_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem6_RVALID : IN STD_LOGIC;
    m_axi_gmem6_RREADY : OUT STD_LOGIC;
    m_axi_gmem6_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_DATA_WIDTH-1 downto 0);
    m_axi_gmem6_RLAST : IN STD_LOGIC;
    m_axi_gmem6_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_RUSER_WIDTH-1 downto 0);
    m_axi_gmem6_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_BVALID : IN STD_LOGIC;
    m_axi_gmem6_BREADY : OUT STD_LOGIC;
    m_axi_gmem6_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem6_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_ID_WIDTH-1 downto 0);
    m_axi_gmem6_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM6_BUSER_WIDTH-1 downto 0);
    m_axi_gmem7_AWVALID : OUT STD_LOGIC;
    m_axi_gmem7_AWREADY : IN STD_LOGIC;
    m_axi_gmem7_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ADDR_WIDTH-1 downto 0);
    m_axi_gmem7_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem7_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem7_WVALID : OUT STD_LOGIC;
    m_axi_gmem7_WREADY : IN STD_LOGIC;
    m_axi_gmem7_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_DATA_WIDTH-1 downto 0);
    m_axi_gmem7_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem7_WLAST : OUT STD_LOGIC;
    m_axi_gmem7_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_WUSER_WIDTH-1 downto 0);
    m_axi_gmem7_ARVALID : OUT STD_LOGIC;
    m_axi_gmem7_ARREADY : IN STD_LOGIC;
    m_axi_gmem7_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ADDR_WIDTH-1 downto 0);
    m_axi_gmem7_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem7_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem7_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem7_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem7_RVALID : IN STD_LOGIC;
    m_axi_gmem7_RREADY : OUT STD_LOGIC;
    m_axi_gmem7_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_DATA_WIDTH-1 downto 0);
    m_axi_gmem7_RLAST : IN STD_LOGIC;
    m_axi_gmem7_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_RUSER_WIDTH-1 downto 0);
    m_axi_gmem7_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_BVALID : IN STD_LOGIC;
    m_axi_gmem7_BREADY : OUT STD_LOGIC;
    m_axi_gmem7_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem7_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_ID_WIDTH-1 downto 0);
    m_axi_gmem7_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM7_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of cnn_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn_top_cnn_top,hls_ip_2025_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=10.071000,HLS_SYN_LAT=2439577,HLS_SYN_TPT=2439575,HLS_SYN_MEM=116,HLS_SYN_DSP=0,HLS_SYN_FF=13524,HLS_SYN_LUT=19564,HLS_VERSION=2025_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_weights : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_bias : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_weights : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_bias : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_weights : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_bias : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem0_0_AWREADY : STD_LOGIC;
    signal gmem0_0_WREADY : STD_LOGIC;
    signal gmem0_0_ARREADY : STD_LOGIC;
    signal gmem0_0_RVALID : STD_LOGIC;
    signal gmem0_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem0_0_RLAST : STD_LOGIC;
    signal gmem0_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem0_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_0_BVALID : STD_LOGIC;
    signal gmem1_0_AWREADY : STD_LOGIC;
    signal gmem1_0_WREADY : STD_LOGIC;
    signal gmem1_0_ARREADY : STD_LOGIC;
    signal gmem1_0_RVALID : STD_LOGIC;
    signal gmem1_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem1_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem1_0_BVALID : STD_LOGIC;
    signal gmem1_0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_0_AWREADY : STD_LOGIC;
    signal gmem2_0_WREADY : STD_LOGIC;
    signal gmem2_0_ARREADY : STD_LOGIC;
    signal gmem2_0_RVALID : STD_LOGIC;
    signal gmem2_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem2_0_RLAST : STD_LOGIC;
    signal gmem2_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem2_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_0_BVALID : STD_LOGIC;
    signal gmem3_0_AWREADY : STD_LOGIC;
    signal gmem3_0_WREADY : STD_LOGIC;
    signal gmem3_0_ARREADY : STD_LOGIC;
    signal gmem3_0_RVALID : STD_LOGIC;
    signal gmem3_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem3_0_RLAST : STD_LOGIC;
    signal gmem3_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem3_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_0_BVALID : STD_LOGIC;
    signal gmem4_0_AWREADY : STD_LOGIC;
    signal gmem4_0_WREADY : STD_LOGIC;
    signal gmem4_0_ARREADY : STD_LOGIC;
    signal gmem4_0_RVALID : STD_LOGIC;
    signal gmem4_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem4_0_RLAST : STD_LOGIC;
    signal gmem4_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem4_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem4_0_BVALID : STD_LOGIC;
    signal gmem5_0_AWREADY : STD_LOGIC;
    signal gmem5_0_WREADY : STD_LOGIC;
    signal gmem5_0_ARREADY : STD_LOGIC;
    signal gmem5_0_RVALID : STD_LOGIC;
    signal gmem5_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem5_0_RLAST : STD_LOGIC;
    signal gmem5_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem5_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem5_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem5_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem5_0_BVALID : STD_LOGIC;
    signal gmem6_0_AWREADY : STD_LOGIC;
    signal gmem6_0_WREADY : STD_LOGIC;
    signal gmem6_0_ARREADY : STD_LOGIC;
    signal gmem6_0_RVALID : STD_LOGIC;
    signal gmem6_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem6_0_RLAST : STD_LOGIC;
    signal gmem6_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem6_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem6_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem6_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem6_0_BVALID : STD_LOGIC;
    signal gmem7_0_AWREADY : STD_LOGIC;
    signal gmem7_0_WREADY : STD_LOGIC;
    signal gmem7_0_ARREADY : STD_LOGIC;
    signal gmem7_0_RVALID : STD_LOGIC;
    signal gmem7_0_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem7_0_RLAST : STD_LOGIC;
    signal gmem7_0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem7_0_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal gmem7_0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem7_0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem7_0_BVALID : STD_LOGIC;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_output_r_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_output_r_c_write : STD_LOGIC;
    signal read_input_top_U0_ap_start : STD_LOGIC;
    signal read_input_top_U0_ap_done : STD_LOGIC;
    signal read_input_top_U0_ap_continue : STD_LOGIC;
    signal read_input_top_U0_ap_idle : STD_LOGIC;
    signal read_input_top_U0_ap_ready : STD_LOGIC;
    signal read_input_top_U0_m_axi_gmem0_0_AWVALID : STD_LOGIC;
    signal read_input_top_U0_m_axi_gmem0_0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_WVALID : STD_LOGIC;
    signal read_input_top_U0_m_axi_gmem0_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_WLAST : STD_LOGIC;
    signal read_input_top_U0_m_axi_gmem0_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARVALID : STD_LOGIC;
    signal read_input_top_U0_m_axi_gmem0_0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_top_U0_m_axi_gmem0_0_RREADY : STD_LOGIC;
    signal read_input_top_U0_m_axi_gmem0_0_BREADY : STD_LOGIC;
    signal read_input_top_U0_input_s_din : STD_LOGIC_VECTOR (15 downto 0);
    signal read_input_top_U0_input_s_write : STD_LOGIC;
    signal compute_4_U0_ap_start : STD_LOGIC;
    signal compute_4_U0_ap_done : STD_LOGIC;
    signal compute_4_U0_ap_continue : STD_LOGIC;
    signal compute_4_U0_ap_idle : STD_LOGIC;
    signal compute_4_U0_ap_ready : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem2_0_AWVALID : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem2_0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_WVALID : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem2_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_WLAST : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem2_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARVALID : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem2_0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem2_0_RREADY : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem2_0_BREADY : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem3_0_AWVALID : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem3_0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_WVALID : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem3_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_WLAST : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem3_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARVALID : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem3_0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_4_U0_m_axi_gmem3_0_RREADY : STD_LOGIC;
    signal compute_4_U0_m_axi_gmem3_0_BREADY : STD_LOGIC;
    signal compute_4_U0_input_s_read : STD_LOGIC;
    signal compute_4_U0_conv1_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_4_U0_conv1_out_write : STD_LOGIC;
    signal compute_3_U0_ap_start : STD_LOGIC;
    signal compute_3_U0_ap_done : STD_LOGIC;
    signal compute_3_U0_ap_continue : STD_LOGIC;
    signal compute_3_U0_ap_idle : STD_LOGIC;
    signal compute_3_U0_ap_ready : STD_LOGIC;
    signal compute_3_U0_start_out : STD_LOGIC;
    signal compute_3_U0_start_write : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem4_0_AWVALID : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem4_0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_WVALID : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem4_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_WLAST : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem4_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARVALID : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem4_0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem4_0_RREADY : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem4_0_BREADY : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem5_0_AWVALID : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem5_0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_WVALID : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem5_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_WLAST : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem5_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARVALID : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem5_0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_3_U0_m_axi_gmem5_0_RREADY : STD_LOGIC;
    signal compute_3_U0_m_axi_gmem5_0_BREADY : STD_LOGIC;
    signal compute_3_U0_conv1_out_read : STD_LOGIC;
    signal compute_3_U0_conv2_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_3_U0_conv2_out_write : STD_LOGIC;
    signal compute_1_U0_ap_start : STD_LOGIC;
    signal compute_1_U0_ap_done : STD_LOGIC;
    signal compute_1_U0_ap_continue : STD_LOGIC;
    signal compute_1_U0_ap_idle : STD_LOGIC;
    signal compute_1_U0_ap_ready : STD_LOGIC;
    signal compute_1_U0_conv2_out_read : STD_LOGIC;
    signal compute_1_U0_pool1_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_1_U0_pool1_out_write : STD_LOGIC;
    signal compute_1_U0_pool1_out_num_data_valid : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_1_U0_pool1_out_fifo_cap : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_2_U0_ap_start : STD_LOGIC;
    signal compute_2_U0_ap_done : STD_LOGIC;
    signal compute_2_U0_ap_continue : STD_LOGIC;
    signal compute_2_U0_ap_idle : STD_LOGIC;
    signal compute_2_U0_ap_ready : STD_LOGIC;
    signal compute_2_U0_start_out : STD_LOGIC;
    signal compute_2_U0_start_write : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem6_0_AWVALID : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem6_0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_WVALID : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem6_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_WLAST : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem6_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARVALID : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem6_0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem6_0_RREADY : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem6_0_BREADY : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem7_0_AWVALID : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem7_0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_WVALID : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem7_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_WLAST : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem7_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARVALID : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem7_0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_2_U0_m_axi_gmem7_0_RREADY : STD_LOGIC;
    signal compute_2_U0_m_axi_gmem7_0_BREADY : STD_LOGIC;
    signal compute_2_U0_pool1_out_read : STD_LOGIC;
    signal compute_2_U0_conv3_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_2_U0_conv3_out_write : STD_LOGIC;
    signal compute_U0_ap_start : STD_LOGIC;
    signal compute_U0_ap_done : STD_LOGIC;
    signal compute_U0_ap_continue : STD_LOGIC;
    signal compute_U0_ap_idle : STD_LOGIC;
    signal compute_U0_ap_ready : STD_LOGIC;
    signal compute_U0_conv3_out_read : STD_LOGIC;
    signal compute_U0_output_s_din : STD_LOGIC_VECTOR (15 downto 0);
    signal compute_U0_output_s_write : STD_LOGIC;
    signal compute_U0_output_s_num_data_valid : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_U0_output_s_fifo_cap : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_ap_start : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_ap_done : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_ap_continue : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_ap_idle : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_ap_ready : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_output_r_read : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWVALID : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WVALID : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WLAST : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARVALID : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_RREADY : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_BREADY : STD_LOGIC;
    signal Block_entry_gmem1_wr_proc_U0_output_s_read : STD_LOGIC;
    signal output_r_c_full_n : STD_LOGIC;
    signal output_r_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_c_empty_n : STD_LOGIC;
    signal output_r_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal output_r_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal input_s_full_n : STD_LOGIC;
    signal input_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal input_s_empty_n : STD_LOGIC;
    signal input_s_num_data_valid : STD_LOGIC_VECTOR (8 downto 0);
    signal input_s_fifo_cap : STD_LOGIC_VECTOR (8 downto 0);
    signal conv1_out_full_n : STD_LOGIC;
    signal conv1_out_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv1_out_empty_n : STD_LOGIC;
    signal conv1_out_num_data_valid : STD_LOGIC_VECTOR (13 downto 0);
    signal conv1_out_fifo_cap : STD_LOGIC_VECTOR (13 downto 0);
    signal conv2_out_full_n : STD_LOGIC;
    signal conv2_out_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv2_out_empty_n : STD_LOGIC;
    signal conv2_out_num_data_valid : STD_LOGIC_VECTOR (13 downto 0);
    signal conv2_out_fifo_cap : STD_LOGIC_VECTOR (13 downto 0);
    signal pool1_out_full_n : STD_LOGIC;
    signal pool1_out_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal pool1_out_empty_n : STD_LOGIC;
    signal pool1_out_num_data_valid : STD_LOGIC_VECTOR (11 downto 0);
    signal pool1_out_fifo_cap : STD_LOGIC_VECTOR (11 downto 0);
    signal conv3_out_full_n : STD_LOGIC;
    signal conv3_out_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal conv3_out_empty_n : STD_LOGIC;
    signal conv3_out_num_data_valid : STD_LOGIC_VECTOR (11 downto 0);
    signal conv3_out_fifo_cap : STD_LOGIC_VECTOR (11 downto 0);
    signal output_s_full_n : STD_LOGIC;
    signal output_s_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal output_s_empty_n : STD_LOGIC;
    signal output_s_num_data_valid : STD_LOGIC_VECTOR (9 downto 0);
    signal output_s_fifo_cap : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_input_top_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_input_top_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_compute_4_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_compute_4_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_compute_3_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_compute_3_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_compute_2_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_compute_2_U0_ap_ready : STD_LOGIC;
    signal start_for_Block_entry_gmem1_wr_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_entry_gmem1_wr_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_entry_gmem1_wr_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_entry_gmem1_wr_proc_U0_empty_n : STD_LOGIC;
    signal start_for_compute_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_1_U0_full_n : STD_LOGIC;
    signal start_for_compute_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_1_U0_empty_n : STD_LOGIC;
    signal start_for_compute_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_U0_full_n : STD_LOGIC;
    signal start_for_compute_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compute_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        output_r : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_c_full_n : IN STD_LOGIC;
        output_r_c_write : OUT STD_LOGIC;
        output_r_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cnn_top_read_input_top IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem0_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem0_0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem0_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (31 downto 0);
        input_s_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_s_full_n : IN STD_LOGIC;
        input_s_write : OUT STD_LOGIC;
        input_s_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        input_s_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_top_compute_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem2_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_WREADY : IN STD_LOGIC;
        m_axi_gmem2_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem2_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RVALID : IN STD_LOGIC;
        m_axi_gmem2_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem2_0_RLAST : IN STD_LOGIC;
        m_axi_gmem2_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem2_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_BVALID : IN STD_LOGIC;
        m_axi_gmem2_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        this_weights : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem3_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem3_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem3_0_WREADY : IN STD_LOGIC;
        m_axi_gmem3_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem3_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem3_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem3_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem3_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_0_RVALID : IN STD_LOGIC;
        m_axi_gmem3_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem3_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem3_0_RLAST : IN STD_LOGIC;
        m_axi_gmem3_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem3_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_0_BVALID : IN STD_LOGIC;
        m_axi_gmem3_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem3_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        this_bias : IN STD_LOGIC_VECTOR (31 downto 0);
        input_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        input_s_empty_n : IN STD_LOGIC;
        input_s_read : OUT STD_LOGIC;
        input_s_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        input_s_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        conv1_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv1_out_full_n : IN STD_LOGIC;
        conv1_out_write : OUT STD_LOGIC;
        conv1_out_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
        conv1_out_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_top_compute_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem4_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem4_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem4_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem4_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem4_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem4_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem4_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem4_0_WREADY : IN STD_LOGIC;
        m_axi_gmem4_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem4_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem4_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem4_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem4_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem4_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem4_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem4_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem4_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_0_RVALID : IN STD_LOGIC;
        m_axi_gmem4_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem4_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem4_0_RLAST : IN STD_LOGIC;
        m_axi_gmem4_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem4_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_0_BVALID : IN STD_LOGIC;
        m_axi_gmem4_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem4_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        this_weights : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem5_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem5_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem5_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem5_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem5_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem5_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem5_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem5_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem5_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem5_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem5_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem5_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem5_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem5_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem5_0_WREADY : IN STD_LOGIC;
        m_axi_gmem5_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem5_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem5_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem5_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem5_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem5_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem5_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem5_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem5_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem5_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem5_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem5_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem5_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem5_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem5_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem5_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem5_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem5_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem5_0_RVALID : IN STD_LOGIC;
        m_axi_gmem5_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem5_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem5_0_RLAST : IN STD_LOGIC;
        m_axi_gmem5_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem5_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem5_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem5_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem5_0_BVALID : IN STD_LOGIC;
        m_axi_gmem5_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem5_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem5_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem5_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        this_bias : IN STD_LOGIC_VECTOR (31 downto 0);
        conv1_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv1_out_empty_n : IN STD_LOGIC;
        conv1_out_read : OUT STD_LOGIC;
        conv1_out_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
        conv1_out_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0);
        conv2_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv2_out_full_n : IN STD_LOGIC;
        conv2_out_write : OUT STD_LOGIC;
        conv2_out_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
        conv2_out_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_top_compute_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv2_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv2_out_empty_n : IN STD_LOGIC;
        conv2_out_read : OUT STD_LOGIC;
        conv2_out_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
        conv2_out_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0);
        pool1_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        pool1_out_full_n : IN STD_LOGIC;
        pool1_out_write : OUT STD_LOGIC;
        pool1_out_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
        pool1_out_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_top_compute_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem6_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem6_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem6_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem6_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem6_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem6_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem6_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem6_0_WREADY : IN STD_LOGIC;
        m_axi_gmem6_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem6_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem6_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem6_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem6_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem6_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem6_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem6_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem6_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem6_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_0_RVALID : IN STD_LOGIC;
        m_axi_gmem6_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem6_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem6_0_RLAST : IN STD_LOGIC;
        m_axi_gmem6_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem6_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_0_BVALID : IN STD_LOGIC;
        m_axi_gmem6_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem6_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem6_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem6_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        this_weights : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem7_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem7_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem7_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem7_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem7_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem7_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem7_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem7_0_WREADY : IN STD_LOGIC;
        m_axi_gmem7_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem7_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem7_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem7_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem7_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem7_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem7_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem7_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem7_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem7_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_0_RVALID : IN STD_LOGIC;
        m_axi_gmem7_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem7_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem7_0_RLAST : IN STD_LOGIC;
        m_axi_gmem7_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem7_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_0_BVALID : IN STD_LOGIC;
        m_axi_gmem7_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem7_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem7_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem7_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        this_bias : IN STD_LOGIC_VECTOR (31 downto 0);
        pool1_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        pool1_out_empty_n : IN STD_LOGIC;
        pool1_out_read : OUT STD_LOGIC;
        pool1_out_num_data_valid : IN STD_LOGIC_VECTOR (11 downto 0);
        pool1_out_fifo_cap : IN STD_LOGIC_VECTOR (11 downto 0);
        conv3_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        conv3_out_full_n : IN STD_LOGIC;
        conv3_out_write : OUT STD_LOGIC;
        conv3_out_num_data_valid : IN STD_LOGIC_VECTOR (11 downto 0);
        conv3_out_fifo_cap : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component cnn_top_compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv3_out_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        conv3_out_empty_n : IN STD_LOGIC;
        conv3_out_read : OUT STD_LOGIC;
        conv3_out_num_data_valid : IN STD_LOGIC_VECTOR (11 downto 0);
        conv3_out_fifo_cap : IN STD_LOGIC_VECTOR (11 downto 0);
        output_s_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_s_full_n : IN STD_LOGIC;
        output_s_write : OUT STD_LOGIC;
        output_s_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
        output_s_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_top_Block_entry_gmem1_wr_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_empty_n : IN STD_LOGIC;
        output_r_read : OUT STD_LOGIC;
        output_r_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_0_WREADY : IN STD_LOGIC;
        m_axi_gmem1_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem1_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_RVALID : IN STD_LOGIC;
        m_axi_gmem1_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem1_0_RLAST : IN STD_LOGIC;
        m_axi_gmem1_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem1_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_BVALID : IN STD_LOGIC;
        m_axi_gmem1_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        output_s_empty_n : IN STD_LOGIC;
        output_s_read : OUT STD_LOGIC;
        output_s_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        output_s_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component cnn_top_fifo_w32_d8_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cnn_top_fifo_w16_d256_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_top_fifo_w16_d8192_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (13 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_top_fifo_w16_d2048_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component cnn_top_fifo_w16_d512_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC;
        if_num_data_valid : OUT STD_LOGIC_VECTOR (9 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component cnn_top_start_for_Block_entry_gmem1_wr_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cnn_top_start_for_compute_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cnn_top_start_for_compute_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component cnn_top_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv1_weights : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv1_bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv2_weights : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv2_bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv3_weights : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv3_bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component cnn_top_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component cnn_top_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component cnn_top_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component cnn_top_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component cnn_top_gmem4_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component cnn_top_gmem5_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component cnn_top_gmem6_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component cnn_top_gmem7_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_NUM_READ_OUTSTANDING : INTEGER;
        CH0_NUM_WRITE_OUTSTANDING : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component cnn_top_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        conv1_weights => conv1_weights,
        conv1_bias => conv1_bias,
        conv2_weights => conv2_weights,
        conv2_bias => conv2_bias,
        conv3_weights => conv3_weights,
        conv3_bias => conv3_bias,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component cnn_top_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 16,
        CH0_USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => read_input_top_U0_m_axi_gmem0_0_ARVALID,
        I_CH0_ARREADY => gmem0_0_ARREADY,
        I_CH0_ARADDR => read_input_top_U0_m_axi_gmem0_0_ARADDR,
        I_CH0_ARLEN => read_input_top_U0_m_axi_gmem0_0_ARLEN,
        I_CH0_RVALID => gmem0_0_RVALID,
        I_CH0_RREADY => read_input_top_U0_m_axi_gmem0_0_RREADY,
        I_CH0_RDATA => gmem0_0_RDATA,
        I_CH0_RFIFONUM => gmem0_0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => gmem0_0_AWREADY,
        I_CH0_AWADDR => ap_const_lv32_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => gmem0_0_WREADY,
        I_CH0_WDATA => ap_const_lv16_0,
        I_CH0_WSTRB => ap_const_lv2_0,
        I_CH0_BVALID => gmem0_0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    gmem1_m_axi_U : component cnn_top_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 16,
        CH0_USER_AW => 32,
        NUM_READ_OUTSTANDING => 0,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => ap_const_logic_0,
        I_CH0_ARREADY => gmem1_0_ARREADY,
        I_CH0_ARADDR => ap_const_lv32_0,
        I_CH0_ARLEN => ap_const_lv32_0,
        I_CH0_RVALID => gmem1_0_RVALID,
        I_CH0_RREADY => ap_const_logic_0,
        I_CH0_RDATA => gmem1_0_RDATA,
        I_CH0_RFIFONUM => gmem1_0_RFIFONUM,
        I_CH0_AWVALID => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWVALID,
        I_CH0_AWREADY => gmem1_0_AWREADY,
        I_CH0_AWADDR => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWADDR,
        I_CH0_AWLEN => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWLEN,
        I_CH0_WVALID => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WVALID,
        I_CH0_WREADY => gmem1_0_WREADY,
        I_CH0_WDATA => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WDATA,
        I_CH0_WSTRB => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WSTRB,
        I_CH0_BVALID => gmem1_0_BVALID,
        I_CH0_BREADY => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_BREADY);

    gmem2_m_axi_U : component cnn_top_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 16,
        CH0_USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => compute_4_U0_m_axi_gmem2_0_ARVALID,
        I_CH0_ARREADY => gmem2_0_ARREADY,
        I_CH0_ARADDR => compute_4_U0_m_axi_gmem2_0_ARADDR,
        I_CH0_ARLEN => compute_4_U0_m_axi_gmem2_0_ARLEN,
        I_CH0_RVALID => gmem2_0_RVALID,
        I_CH0_RREADY => compute_4_U0_m_axi_gmem2_0_RREADY,
        I_CH0_RDATA => gmem2_0_RDATA,
        I_CH0_RFIFONUM => gmem2_0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => gmem2_0_AWREADY,
        I_CH0_AWADDR => ap_const_lv32_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => gmem2_0_WREADY,
        I_CH0_WDATA => ap_const_lv16_0,
        I_CH0_WSTRB => ap_const_lv2_0,
        I_CH0_BVALID => gmem2_0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    gmem3_m_axi_U : component cnn_top_gmem3_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 16,
        CH0_USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => compute_4_U0_m_axi_gmem3_0_ARVALID,
        I_CH0_ARREADY => gmem3_0_ARREADY,
        I_CH0_ARADDR => compute_4_U0_m_axi_gmem3_0_ARADDR,
        I_CH0_ARLEN => compute_4_U0_m_axi_gmem3_0_ARLEN,
        I_CH0_RVALID => gmem3_0_RVALID,
        I_CH0_RREADY => compute_4_U0_m_axi_gmem3_0_RREADY,
        I_CH0_RDATA => gmem3_0_RDATA,
        I_CH0_RFIFONUM => gmem3_0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => gmem3_0_AWREADY,
        I_CH0_AWADDR => ap_const_lv32_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => gmem3_0_WREADY,
        I_CH0_WDATA => ap_const_lv16_0,
        I_CH0_WSTRB => ap_const_lv2_0,
        I_CH0_BVALID => gmem3_0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    gmem4_m_axi_U : component cnn_top_gmem4_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM4_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM4_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM4_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM4_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM4_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM4_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM4_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM4_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM4_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM4_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM4_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 16,
        CH0_USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_gmem4_AWVALID,
        AWREADY => m_axi_gmem4_AWREADY,
        AWADDR => m_axi_gmem4_AWADDR,
        AWID => m_axi_gmem4_AWID,
        AWLEN => m_axi_gmem4_AWLEN,
        AWSIZE => m_axi_gmem4_AWSIZE,
        AWBURST => m_axi_gmem4_AWBURST,
        AWLOCK => m_axi_gmem4_AWLOCK,
        AWCACHE => m_axi_gmem4_AWCACHE,
        AWPROT => m_axi_gmem4_AWPROT,
        AWQOS => m_axi_gmem4_AWQOS,
        AWREGION => m_axi_gmem4_AWREGION,
        AWUSER => m_axi_gmem4_AWUSER,
        WVALID => m_axi_gmem4_WVALID,
        WREADY => m_axi_gmem4_WREADY,
        WDATA => m_axi_gmem4_WDATA,
        WSTRB => m_axi_gmem4_WSTRB,
        WLAST => m_axi_gmem4_WLAST,
        WID => m_axi_gmem4_WID,
        WUSER => m_axi_gmem4_WUSER,
        ARVALID => m_axi_gmem4_ARVALID,
        ARREADY => m_axi_gmem4_ARREADY,
        ARADDR => m_axi_gmem4_ARADDR,
        ARID => m_axi_gmem4_ARID,
        ARLEN => m_axi_gmem4_ARLEN,
        ARSIZE => m_axi_gmem4_ARSIZE,
        ARBURST => m_axi_gmem4_ARBURST,
        ARLOCK => m_axi_gmem4_ARLOCK,
        ARCACHE => m_axi_gmem4_ARCACHE,
        ARPROT => m_axi_gmem4_ARPROT,
        ARQOS => m_axi_gmem4_ARQOS,
        ARREGION => m_axi_gmem4_ARREGION,
        ARUSER => m_axi_gmem4_ARUSER,
        RVALID => m_axi_gmem4_RVALID,
        RREADY => m_axi_gmem4_RREADY,
        RDATA => m_axi_gmem4_RDATA,
        RLAST => m_axi_gmem4_RLAST,
        RID => m_axi_gmem4_RID,
        RUSER => m_axi_gmem4_RUSER,
        RRESP => m_axi_gmem4_RRESP,
        BVALID => m_axi_gmem4_BVALID,
        BREADY => m_axi_gmem4_BREADY,
        BRESP => m_axi_gmem4_BRESP,
        BID => m_axi_gmem4_BID,
        BUSER => m_axi_gmem4_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => compute_3_U0_m_axi_gmem4_0_ARVALID,
        I_CH0_ARREADY => gmem4_0_ARREADY,
        I_CH0_ARADDR => compute_3_U0_m_axi_gmem4_0_ARADDR,
        I_CH0_ARLEN => compute_3_U0_m_axi_gmem4_0_ARLEN,
        I_CH0_RVALID => gmem4_0_RVALID,
        I_CH0_RREADY => compute_3_U0_m_axi_gmem4_0_RREADY,
        I_CH0_RDATA => gmem4_0_RDATA,
        I_CH0_RFIFONUM => gmem4_0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => gmem4_0_AWREADY,
        I_CH0_AWADDR => ap_const_lv32_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => gmem4_0_WREADY,
        I_CH0_WDATA => ap_const_lv16_0,
        I_CH0_WSTRB => ap_const_lv2_0,
        I_CH0_BVALID => gmem4_0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    gmem5_m_axi_U : component cnn_top_gmem5_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM5_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM5_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM5_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM5_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM5_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM5_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM5_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM5_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM5_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM5_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM5_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 16,
        CH0_USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_gmem5_AWVALID,
        AWREADY => m_axi_gmem5_AWREADY,
        AWADDR => m_axi_gmem5_AWADDR,
        AWID => m_axi_gmem5_AWID,
        AWLEN => m_axi_gmem5_AWLEN,
        AWSIZE => m_axi_gmem5_AWSIZE,
        AWBURST => m_axi_gmem5_AWBURST,
        AWLOCK => m_axi_gmem5_AWLOCK,
        AWCACHE => m_axi_gmem5_AWCACHE,
        AWPROT => m_axi_gmem5_AWPROT,
        AWQOS => m_axi_gmem5_AWQOS,
        AWREGION => m_axi_gmem5_AWREGION,
        AWUSER => m_axi_gmem5_AWUSER,
        WVALID => m_axi_gmem5_WVALID,
        WREADY => m_axi_gmem5_WREADY,
        WDATA => m_axi_gmem5_WDATA,
        WSTRB => m_axi_gmem5_WSTRB,
        WLAST => m_axi_gmem5_WLAST,
        WID => m_axi_gmem5_WID,
        WUSER => m_axi_gmem5_WUSER,
        ARVALID => m_axi_gmem5_ARVALID,
        ARREADY => m_axi_gmem5_ARREADY,
        ARADDR => m_axi_gmem5_ARADDR,
        ARID => m_axi_gmem5_ARID,
        ARLEN => m_axi_gmem5_ARLEN,
        ARSIZE => m_axi_gmem5_ARSIZE,
        ARBURST => m_axi_gmem5_ARBURST,
        ARLOCK => m_axi_gmem5_ARLOCK,
        ARCACHE => m_axi_gmem5_ARCACHE,
        ARPROT => m_axi_gmem5_ARPROT,
        ARQOS => m_axi_gmem5_ARQOS,
        ARREGION => m_axi_gmem5_ARREGION,
        ARUSER => m_axi_gmem5_ARUSER,
        RVALID => m_axi_gmem5_RVALID,
        RREADY => m_axi_gmem5_RREADY,
        RDATA => m_axi_gmem5_RDATA,
        RLAST => m_axi_gmem5_RLAST,
        RID => m_axi_gmem5_RID,
        RUSER => m_axi_gmem5_RUSER,
        RRESP => m_axi_gmem5_RRESP,
        BVALID => m_axi_gmem5_BVALID,
        BREADY => m_axi_gmem5_BREADY,
        BRESP => m_axi_gmem5_BRESP,
        BID => m_axi_gmem5_BID,
        BUSER => m_axi_gmem5_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => compute_3_U0_m_axi_gmem5_0_ARVALID,
        I_CH0_ARREADY => gmem5_0_ARREADY,
        I_CH0_ARADDR => compute_3_U0_m_axi_gmem5_0_ARADDR,
        I_CH0_ARLEN => compute_3_U0_m_axi_gmem5_0_ARLEN,
        I_CH0_RVALID => gmem5_0_RVALID,
        I_CH0_RREADY => compute_3_U0_m_axi_gmem5_0_RREADY,
        I_CH0_RDATA => gmem5_0_RDATA,
        I_CH0_RFIFONUM => gmem5_0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => gmem5_0_AWREADY,
        I_CH0_AWADDR => ap_const_lv32_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => gmem5_0_WREADY,
        I_CH0_WDATA => ap_const_lv16_0,
        I_CH0_WSTRB => ap_const_lv2_0,
        I_CH0_BVALID => gmem5_0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    gmem6_m_axi_U : component cnn_top_gmem6_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM6_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM6_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM6_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM6_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM6_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM6_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM6_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM6_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM6_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM6_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM6_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 16,
        CH0_USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_gmem6_AWVALID,
        AWREADY => m_axi_gmem6_AWREADY,
        AWADDR => m_axi_gmem6_AWADDR,
        AWID => m_axi_gmem6_AWID,
        AWLEN => m_axi_gmem6_AWLEN,
        AWSIZE => m_axi_gmem6_AWSIZE,
        AWBURST => m_axi_gmem6_AWBURST,
        AWLOCK => m_axi_gmem6_AWLOCK,
        AWCACHE => m_axi_gmem6_AWCACHE,
        AWPROT => m_axi_gmem6_AWPROT,
        AWQOS => m_axi_gmem6_AWQOS,
        AWREGION => m_axi_gmem6_AWREGION,
        AWUSER => m_axi_gmem6_AWUSER,
        WVALID => m_axi_gmem6_WVALID,
        WREADY => m_axi_gmem6_WREADY,
        WDATA => m_axi_gmem6_WDATA,
        WSTRB => m_axi_gmem6_WSTRB,
        WLAST => m_axi_gmem6_WLAST,
        WID => m_axi_gmem6_WID,
        WUSER => m_axi_gmem6_WUSER,
        ARVALID => m_axi_gmem6_ARVALID,
        ARREADY => m_axi_gmem6_ARREADY,
        ARADDR => m_axi_gmem6_ARADDR,
        ARID => m_axi_gmem6_ARID,
        ARLEN => m_axi_gmem6_ARLEN,
        ARSIZE => m_axi_gmem6_ARSIZE,
        ARBURST => m_axi_gmem6_ARBURST,
        ARLOCK => m_axi_gmem6_ARLOCK,
        ARCACHE => m_axi_gmem6_ARCACHE,
        ARPROT => m_axi_gmem6_ARPROT,
        ARQOS => m_axi_gmem6_ARQOS,
        ARREGION => m_axi_gmem6_ARREGION,
        ARUSER => m_axi_gmem6_ARUSER,
        RVALID => m_axi_gmem6_RVALID,
        RREADY => m_axi_gmem6_RREADY,
        RDATA => m_axi_gmem6_RDATA,
        RLAST => m_axi_gmem6_RLAST,
        RID => m_axi_gmem6_RID,
        RUSER => m_axi_gmem6_RUSER,
        RRESP => m_axi_gmem6_RRESP,
        BVALID => m_axi_gmem6_BVALID,
        BREADY => m_axi_gmem6_BREADY,
        BRESP => m_axi_gmem6_BRESP,
        BID => m_axi_gmem6_BID,
        BUSER => m_axi_gmem6_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => compute_2_U0_m_axi_gmem6_0_ARVALID,
        I_CH0_ARREADY => gmem6_0_ARREADY,
        I_CH0_ARADDR => compute_2_U0_m_axi_gmem6_0_ARADDR,
        I_CH0_ARLEN => compute_2_U0_m_axi_gmem6_0_ARLEN,
        I_CH0_RVALID => gmem6_0_RVALID,
        I_CH0_RREADY => compute_2_U0_m_axi_gmem6_0_RREADY,
        I_CH0_RDATA => gmem6_0_RDATA,
        I_CH0_RFIFONUM => gmem6_0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => gmem6_0_AWREADY,
        I_CH0_AWADDR => ap_const_lv32_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => gmem6_0_WREADY,
        I_CH0_WDATA => ap_const_lv16_0,
        I_CH0_WSTRB => ap_const_lv2_0,
        I_CH0_BVALID => gmem6_0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    gmem7_m_axi_U : component cnn_top_gmem7_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 32,
        MAX_WRITE_BURST_LENGTH => 32,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM7_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM7_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM7_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM7_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM7_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM7_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM7_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM7_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM7_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM7_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM7_CACHE_VALUE,
        CH0_NUM_READ_OUTSTANDING => 16,
        CH0_NUM_WRITE_OUTSTANDING => 16,
        CH0_USER_RFIFONUM_WIDTH => 11,
        CH0_USER_DW => 16,
        CH0_USER_AW => 32,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_gmem7_AWVALID,
        AWREADY => m_axi_gmem7_AWREADY,
        AWADDR => m_axi_gmem7_AWADDR,
        AWID => m_axi_gmem7_AWID,
        AWLEN => m_axi_gmem7_AWLEN,
        AWSIZE => m_axi_gmem7_AWSIZE,
        AWBURST => m_axi_gmem7_AWBURST,
        AWLOCK => m_axi_gmem7_AWLOCK,
        AWCACHE => m_axi_gmem7_AWCACHE,
        AWPROT => m_axi_gmem7_AWPROT,
        AWQOS => m_axi_gmem7_AWQOS,
        AWREGION => m_axi_gmem7_AWREGION,
        AWUSER => m_axi_gmem7_AWUSER,
        WVALID => m_axi_gmem7_WVALID,
        WREADY => m_axi_gmem7_WREADY,
        WDATA => m_axi_gmem7_WDATA,
        WSTRB => m_axi_gmem7_WSTRB,
        WLAST => m_axi_gmem7_WLAST,
        WID => m_axi_gmem7_WID,
        WUSER => m_axi_gmem7_WUSER,
        ARVALID => m_axi_gmem7_ARVALID,
        ARREADY => m_axi_gmem7_ARREADY,
        ARADDR => m_axi_gmem7_ARADDR,
        ARID => m_axi_gmem7_ARID,
        ARLEN => m_axi_gmem7_ARLEN,
        ARSIZE => m_axi_gmem7_ARSIZE,
        ARBURST => m_axi_gmem7_ARBURST,
        ARLOCK => m_axi_gmem7_ARLOCK,
        ARCACHE => m_axi_gmem7_ARCACHE,
        ARPROT => m_axi_gmem7_ARPROT,
        ARQOS => m_axi_gmem7_ARQOS,
        ARREGION => m_axi_gmem7_ARREGION,
        ARUSER => m_axi_gmem7_ARUSER,
        RVALID => m_axi_gmem7_RVALID,
        RREADY => m_axi_gmem7_RREADY,
        RDATA => m_axi_gmem7_RDATA,
        RLAST => m_axi_gmem7_RLAST,
        RID => m_axi_gmem7_RID,
        RUSER => m_axi_gmem7_RUSER,
        RRESP => m_axi_gmem7_RRESP,
        BVALID => m_axi_gmem7_BVALID,
        BREADY => m_axi_gmem7_BREADY,
        BRESP => m_axi_gmem7_BRESP,
        BID => m_axi_gmem7_BID,
        BUSER => m_axi_gmem7_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => compute_2_U0_m_axi_gmem7_0_ARVALID,
        I_CH0_ARREADY => gmem7_0_ARREADY,
        I_CH0_ARADDR => compute_2_U0_m_axi_gmem7_0_ARADDR,
        I_CH0_ARLEN => compute_2_U0_m_axi_gmem7_0_ARLEN,
        I_CH0_RVALID => gmem7_0_RVALID,
        I_CH0_RREADY => compute_2_U0_m_axi_gmem7_0_RREADY,
        I_CH0_RDATA => gmem7_0_RDATA,
        I_CH0_RFIFONUM => gmem7_0_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => gmem7_0_AWREADY,
        I_CH0_AWADDR => ap_const_lv32_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => gmem7_0_WREADY,
        I_CH0_WDATA => ap_const_lv16_0,
        I_CH0_WSTRB => ap_const_lv2_0,
        I_CH0_BVALID => gmem7_0_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    entry_proc_U0 : component cnn_top_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_Block_entry_gmem1_wr_proc_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        output_r => output_r,
        output_r_c_din => entry_proc_U0_output_r_c_din,
        output_r_c_full_n => output_r_c_full_n,
        output_r_c_write => entry_proc_U0_output_r_c_write,
        output_r_c_num_data_valid => output_r_c_num_data_valid,
        output_r_c_fifo_cap => output_r_c_fifo_cap);

    read_input_top_U0 : component cnn_top_read_input_top
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_input_top_U0_ap_start,
        ap_done => read_input_top_U0_ap_done,
        ap_continue => read_input_top_U0_ap_continue,
        ap_idle => read_input_top_U0_ap_idle,
        ap_ready => read_input_top_U0_ap_ready,
        m_axi_gmem0_0_AWVALID => read_input_top_U0_m_axi_gmem0_0_AWVALID,
        m_axi_gmem0_0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_0_AWADDR => read_input_top_U0_m_axi_gmem0_0_AWADDR,
        m_axi_gmem0_0_AWID => read_input_top_U0_m_axi_gmem0_0_AWID,
        m_axi_gmem0_0_AWLEN => read_input_top_U0_m_axi_gmem0_0_AWLEN,
        m_axi_gmem0_0_AWSIZE => read_input_top_U0_m_axi_gmem0_0_AWSIZE,
        m_axi_gmem0_0_AWBURST => read_input_top_U0_m_axi_gmem0_0_AWBURST,
        m_axi_gmem0_0_AWLOCK => read_input_top_U0_m_axi_gmem0_0_AWLOCK,
        m_axi_gmem0_0_AWCACHE => read_input_top_U0_m_axi_gmem0_0_AWCACHE,
        m_axi_gmem0_0_AWPROT => read_input_top_U0_m_axi_gmem0_0_AWPROT,
        m_axi_gmem0_0_AWQOS => read_input_top_U0_m_axi_gmem0_0_AWQOS,
        m_axi_gmem0_0_AWREGION => read_input_top_U0_m_axi_gmem0_0_AWREGION,
        m_axi_gmem0_0_AWUSER => read_input_top_U0_m_axi_gmem0_0_AWUSER,
        m_axi_gmem0_0_WVALID => read_input_top_U0_m_axi_gmem0_0_WVALID,
        m_axi_gmem0_0_WREADY => ap_const_logic_0,
        m_axi_gmem0_0_WDATA => read_input_top_U0_m_axi_gmem0_0_WDATA,
        m_axi_gmem0_0_WSTRB => read_input_top_U0_m_axi_gmem0_0_WSTRB,
        m_axi_gmem0_0_WLAST => read_input_top_U0_m_axi_gmem0_0_WLAST,
        m_axi_gmem0_0_WID => read_input_top_U0_m_axi_gmem0_0_WID,
        m_axi_gmem0_0_WUSER => read_input_top_U0_m_axi_gmem0_0_WUSER,
        m_axi_gmem0_0_ARVALID => read_input_top_U0_m_axi_gmem0_0_ARVALID,
        m_axi_gmem0_0_ARREADY => gmem0_0_ARREADY,
        m_axi_gmem0_0_ARADDR => read_input_top_U0_m_axi_gmem0_0_ARADDR,
        m_axi_gmem0_0_ARID => read_input_top_U0_m_axi_gmem0_0_ARID,
        m_axi_gmem0_0_ARLEN => read_input_top_U0_m_axi_gmem0_0_ARLEN,
        m_axi_gmem0_0_ARSIZE => read_input_top_U0_m_axi_gmem0_0_ARSIZE,
        m_axi_gmem0_0_ARBURST => read_input_top_U0_m_axi_gmem0_0_ARBURST,
        m_axi_gmem0_0_ARLOCK => read_input_top_U0_m_axi_gmem0_0_ARLOCK,
        m_axi_gmem0_0_ARCACHE => read_input_top_U0_m_axi_gmem0_0_ARCACHE,
        m_axi_gmem0_0_ARPROT => read_input_top_U0_m_axi_gmem0_0_ARPROT,
        m_axi_gmem0_0_ARQOS => read_input_top_U0_m_axi_gmem0_0_ARQOS,
        m_axi_gmem0_0_ARREGION => read_input_top_U0_m_axi_gmem0_0_ARREGION,
        m_axi_gmem0_0_ARUSER => read_input_top_U0_m_axi_gmem0_0_ARUSER,
        m_axi_gmem0_0_RVALID => gmem0_0_RVALID,
        m_axi_gmem0_0_RREADY => read_input_top_U0_m_axi_gmem0_0_RREADY,
        m_axi_gmem0_0_RDATA => gmem0_0_RDATA,
        m_axi_gmem0_0_RLAST => gmem0_0_RLAST,
        m_axi_gmem0_0_RID => gmem0_0_RID,
        m_axi_gmem0_0_RFIFONUM => gmem0_0_RFIFONUM,
        m_axi_gmem0_0_RUSER => gmem0_0_RUSER,
        m_axi_gmem0_0_RRESP => gmem0_0_RRESP,
        m_axi_gmem0_0_BVALID => ap_const_logic_0,
        m_axi_gmem0_0_BREADY => read_input_top_U0_m_axi_gmem0_0_BREADY,
        m_axi_gmem0_0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_0_BID => ap_const_lv1_0,
        m_axi_gmem0_0_BUSER => ap_const_lv1_0,
        input_r => input_r,
        input_s_din => read_input_top_U0_input_s_din,
        input_s_full_n => input_s_full_n,
        input_s_write => read_input_top_U0_input_s_write,
        input_s_num_data_valid => input_s_num_data_valid,
        input_s_fifo_cap => input_s_fifo_cap);

    compute_4_U0 : component cnn_top_compute_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_4_U0_ap_start,
        ap_done => compute_4_U0_ap_done,
        ap_continue => compute_4_U0_ap_continue,
        ap_idle => compute_4_U0_ap_idle,
        ap_ready => compute_4_U0_ap_ready,
        m_axi_gmem2_0_AWVALID => compute_4_U0_m_axi_gmem2_0_AWVALID,
        m_axi_gmem2_0_AWREADY => ap_const_logic_0,
        m_axi_gmem2_0_AWADDR => compute_4_U0_m_axi_gmem2_0_AWADDR,
        m_axi_gmem2_0_AWID => compute_4_U0_m_axi_gmem2_0_AWID,
        m_axi_gmem2_0_AWLEN => compute_4_U0_m_axi_gmem2_0_AWLEN,
        m_axi_gmem2_0_AWSIZE => compute_4_U0_m_axi_gmem2_0_AWSIZE,
        m_axi_gmem2_0_AWBURST => compute_4_U0_m_axi_gmem2_0_AWBURST,
        m_axi_gmem2_0_AWLOCK => compute_4_U0_m_axi_gmem2_0_AWLOCK,
        m_axi_gmem2_0_AWCACHE => compute_4_U0_m_axi_gmem2_0_AWCACHE,
        m_axi_gmem2_0_AWPROT => compute_4_U0_m_axi_gmem2_0_AWPROT,
        m_axi_gmem2_0_AWQOS => compute_4_U0_m_axi_gmem2_0_AWQOS,
        m_axi_gmem2_0_AWREGION => compute_4_U0_m_axi_gmem2_0_AWREGION,
        m_axi_gmem2_0_AWUSER => compute_4_U0_m_axi_gmem2_0_AWUSER,
        m_axi_gmem2_0_WVALID => compute_4_U0_m_axi_gmem2_0_WVALID,
        m_axi_gmem2_0_WREADY => ap_const_logic_0,
        m_axi_gmem2_0_WDATA => compute_4_U0_m_axi_gmem2_0_WDATA,
        m_axi_gmem2_0_WSTRB => compute_4_U0_m_axi_gmem2_0_WSTRB,
        m_axi_gmem2_0_WLAST => compute_4_U0_m_axi_gmem2_0_WLAST,
        m_axi_gmem2_0_WID => compute_4_U0_m_axi_gmem2_0_WID,
        m_axi_gmem2_0_WUSER => compute_4_U0_m_axi_gmem2_0_WUSER,
        m_axi_gmem2_0_ARVALID => compute_4_U0_m_axi_gmem2_0_ARVALID,
        m_axi_gmem2_0_ARREADY => gmem2_0_ARREADY,
        m_axi_gmem2_0_ARADDR => compute_4_U0_m_axi_gmem2_0_ARADDR,
        m_axi_gmem2_0_ARID => compute_4_U0_m_axi_gmem2_0_ARID,
        m_axi_gmem2_0_ARLEN => compute_4_U0_m_axi_gmem2_0_ARLEN,
        m_axi_gmem2_0_ARSIZE => compute_4_U0_m_axi_gmem2_0_ARSIZE,
        m_axi_gmem2_0_ARBURST => compute_4_U0_m_axi_gmem2_0_ARBURST,
        m_axi_gmem2_0_ARLOCK => compute_4_U0_m_axi_gmem2_0_ARLOCK,
        m_axi_gmem2_0_ARCACHE => compute_4_U0_m_axi_gmem2_0_ARCACHE,
        m_axi_gmem2_0_ARPROT => compute_4_U0_m_axi_gmem2_0_ARPROT,
        m_axi_gmem2_0_ARQOS => compute_4_U0_m_axi_gmem2_0_ARQOS,
        m_axi_gmem2_0_ARREGION => compute_4_U0_m_axi_gmem2_0_ARREGION,
        m_axi_gmem2_0_ARUSER => compute_4_U0_m_axi_gmem2_0_ARUSER,
        m_axi_gmem2_0_RVALID => gmem2_0_RVALID,
        m_axi_gmem2_0_RREADY => compute_4_U0_m_axi_gmem2_0_RREADY,
        m_axi_gmem2_0_RDATA => gmem2_0_RDATA,
        m_axi_gmem2_0_RLAST => gmem2_0_RLAST,
        m_axi_gmem2_0_RID => gmem2_0_RID,
        m_axi_gmem2_0_RFIFONUM => gmem2_0_RFIFONUM,
        m_axi_gmem2_0_RUSER => gmem2_0_RUSER,
        m_axi_gmem2_0_RRESP => gmem2_0_RRESP,
        m_axi_gmem2_0_BVALID => ap_const_logic_0,
        m_axi_gmem2_0_BREADY => compute_4_U0_m_axi_gmem2_0_BREADY,
        m_axi_gmem2_0_BRESP => ap_const_lv2_0,
        m_axi_gmem2_0_BID => ap_const_lv1_0,
        m_axi_gmem2_0_BUSER => ap_const_lv1_0,
        this_weights => conv1_weights,
        m_axi_gmem3_0_AWVALID => compute_4_U0_m_axi_gmem3_0_AWVALID,
        m_axi_gmem3_0_AWREADY => ap_const_logic_0,
        m_axi_gmem3_0_AWADDR => compute_4_U0_m_axi_gmem3_0_AWADDR,
        m_axi_gmem3_0_AWID => compute_4_U0_m_axi_gmem3_0_AWID,
        m_axi_gmem3_0_AWLEN => compute_4_U0_m_axi_gmem3_0_AWLEN,
        m_axi_gmem3_0_AWSIZE => compute_4_U0_m_axi_gmem3_0_AWSIZE,
        m_axi_gmem3_0_AWBURST => compute_4_U0_m_axi_gmem3_0_AWBURST,
        m_axi_gmem3_0_AWLOCK => compute_4_U0_m_axi_gmem3_0_AWLOCK,
        m_axi_gmem3_0_AWCACHE => compute_4_U0_m_axi_gmem3_0_AWCACHE,
        m_axi_gmem3_0_AWPROT => compute_4_U0_m_axi_gmem3_0_AWPROT,
        m_axi_gmem3_0_AWQOS => compute_4_U0_m_axi_gmem3_0_AWQOS,
        m_axi_gmem3_0_AWREGION => compute_4_U0_m_axi_gmem3_0_AWREGION,
        m_axi_gmem3_0_AWUSER => compute_4_U0_m_axi_gmem3_0_AWUSER,
        m_axi_gmem3_0_WVALID => compute_4_U0_m_axi_gmem3_0_WVALID,
        m_axi_gmem3_0_WREADY => ap_const_logic_0,
        m_axi_gmem3_0_WDATA => compute_4_U0_m_axi_gmem3_0_WDATA,
        m_axi_gmem3_0_WSTRB => compute_4_U0_m_axi_gmem3_0_WSTRB,
        m_axi_gmem3_0_WLAST => compute_4_U0_m_axi_gmem3_0_WLAST,
        m_axi_gmem3_0_WID => compute_4_U0_m_axi_gmem3_0_WID,
        m_axi_gmem3_0_WUSER => compute_4_U0_m_axi_gmem3_0_WUSER,
        m_axi_gmem3_0_ARVALID => compute_4_U0_m_axi_gmem3_0_ARVALID,
        m_axi_gmem3_0_ARREADY => gmem3_0_ARREADY,
        m_axi_gmem3_0_ARADDR => compute_4_U0_m_axi_gmem3_0_ARADDR,
        m_axi_gmem3_0_ARID => compute_4_U0_m_axi_gmem3_0_ARID,
        m_axi_gmem3_0_ARLEN => compute_4_U0_m_axi_gmem3_0_ARLEN,
        m_axi_gmem3_0_ARSIZE => compute_4_U0_m_axi_gmem3_0_ARSIZE,
        m_axi_gmem3_0_ARBURST => compute_4_U0_m_axi_gmem3_0_ARBURST,
        m_axi_gmem3_0_ARLOCK => compute_4_U0_m_axi_gmem3_0_ARLOCK,
        m_axi_gmem3_0_ARCACHE => compute_4_U0_m_axi_gmem3_0_ARCACHE,
        m_axi_gmem3_0_ARPROT => compute_4_U0_m_axi_gmem3_0_ARPROT,
        m_axi_gmem3_0_ARQOS => compute_4_U0_m_axi_gmem3_0_ARQOS,
        m_axi_gmem3_0_ARREGION => compute_4_U0_m_axi_gmem3_0_ARREGION,
        m_axi_gmem3_0_ARUSER => compute_4_U0_m_axi_gmem3_0_ARUSER,
        m_axi_gmem3_0_RVALID => gmem3_0_RVALID,
        m_axi_gmem3_0_RREADY => compute_4_U0_m_axi_gmem3_0_RREADY,
        m_axi_gmem3_0_RDATA => gmem3_0_RDATA,
        m_axi_gmem3_0_RLAST => gmem3_0_RLAST,
        m_axi_gmem3_0_RID => gmem3_0_RID,
        m_axi_gmem3_0_RFIFONUM => gmem3_0_RFIFONUM,
        m_axi_gmem3_0_RUSER => gmem3_0_RUSER,
        m_axi_gmem3_0_RRESP => gmem3_0_RRESP,
        m_axi_gmem3_0_BVALID => ap_const_logic_0,
        m_axi_gmem3_0_BREADY => compute_4_U0_m_axi_gmem3_0_BREADY,
        m_axi_gmem3_0_BRESP => ap_const_lv2_0,
        m_axi_gmem3_0_BID => ap_const_lv1_0,
        m_axi_gmem3_0_BUSER => ap_const_lv1_0,
        this_bias => conv1_bias,
        input_s_dout => input_s_dout,
        input_s_empty_n => input_s_empty_n,
        input_s_read => compute_4_U0_input_s_read,
        input_s_num_data_valid => input_s_num_data_valid,
        input_s_fifo_cap => input_s_fifo_cap,
        conv1_out_din => compute_4_U0_conv1_out_din,
        conv1_out_full_n => conv1_out_full_n,
        conv1_out_write => compute_4_U0_conv1_out_write,
        conv1_out_num_data_valid => conv1_out_num_data_valid,
        conv1_out_fifo_cap => conv1_out_fifo_cap);

    compute_3_U0 : component cnn_top_compute_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_3_U0_ap_start,
        start_full_n => start_for_compute_1_U0_full_n,
        ap_done => compute_3_U0_ap_done,
        ap_continue => compute_3_U0_ap_continue,
        ap_idle => compute_3_U0_ap_idle,
        ap_ready => compute_3_U0_ap_ready,
        start_out => compute_3_U0_start_out,
        start_write => compute_3_U0_start_write,
        m_axi_gmem4_0_AWVALID => compute_3_U0_m_axi_gmem4_0_AWVALID,
        m_axi_gmem4_0_AWREADY => ap_const_logic_0,
        m_axi_gmem4_0_AWADDR => compute_3_U0_m_axi_gmem4_0_AWADDR,
        m_axi_gmem4_0_AWID => compute_3_U0_m_axi_gmem4_0_AWID,
        m_axi_gmem4_0_AWLEN => compute_3_U0_m_axi_gmem4_0_AWLEN,
        m_axi_gmem4_0_AWSIZE => compute_3_U0_m_axi_gmem4_0_AWSIZE,
        m_axi_gmem4_0_AWBURST => compute_3_U0_m_axi_gmem4_0_AWBURST,
        m_axi_gmem4_0_AWLOCK => compute_3_U0_m_axi_gmem4_0_AWLOCK,
        m_axi_gmem4_0_AWCACHE => compute_3_U0_m_axi_gmem4_0_AWCACHE,
        m_axi_gmem4_0_AWPROT => compute_3_U0_m_axi_gmem4_0_AWPROT,
        m_axi_gmem4_0_AWQOS => compute_3_U0_m_axi_gmem4_0_AWQOS,
        m_axi_gmem4_0_AWREGION => compute_3_U0_m_axi_gmem4_0_AWREGION,
        m_axi_gmem4_0_AWUSER => compute_3_U0_m_axi_gmem4_0_AWUSER,
        m_axi_gmem4_0_WVALID => compute_3_U0_m_axi_gmem4_0_WVALID,
        m_axi_gmem4_0_WREADY => ap_const_logic_0,
        m_axi_gmem4_0_WDATA => compute_3_U0_m_axi_gmem4_0_WDATA,
        m_axi_gmem4_0_WSTRB => compute_3_U0_m_axi_gmem4_0_WSTRB,
        m_axi_gmem4_0_WLAST => compute_3_U0_m_axi_gmem4_0_WLAST,
        m_axi_gmem4_0_WID => compute_3_U0_m_axi_gmem4_0_WID,
        m_axi_gmem4_0_WUSER => compute_3_U0_m_axi_gmem4_0_WUSER,
        m_axi_gmem4_0_ARVALID => compute_3_U0_m_axi_gmem4_0_ARVALID,
        m_axi_gmem4_0_ARREADY => gmem4_0_ARREADY,
        m_axi_gmem4_0_ARADDR => compute_3_U0_m_axi_gmem4_0_ARADDR,
        m_axi_gmem4_0_ARID => compute_3_U0_m_axi_gmem4_0_ARID,
        m_axi_gmem4_0_ARLEN => compute_3_U0_m_axi_gmem4_0_ARLEN,
        m_axi_gmem4_0_ARSIZE => compute_3_U0_m_axi_gmem4_0_ARSIZE,
        m_axi_gmem4_0_ARBURST => compute_3_U0_m_axi_gmem4_0_ARBURST,
        m_axi_gmem4_0_ARLOCK => compute_3_U0_m_axi_gmem4_0_ARLOCK,
        m_axi_gmem4_0_ARCACHE => compute_3_U0_m_axi_gmem4_0_ARCACHE,
        m_axi_gmem4_0_ARPROT => compute_3_U0_m_axi_gmem4_0_ARPROT,
        m_axi_gmem4_0_ARQOS => compute_3_U0_m_axi_gmem4_0_ARQOS,
        m_axi_gmem4_0_ARREGION => compute_3_U0_m_axi_gmem4_0_ARREGION,
        m_axi_gmem4_0_ARUSER => compute_3_U0_m_axi_gmem4_0_ARUSER,
        m_axi_gmem4_0_RVALID => gmem4_0_RVALID,
        m_axi_gmem4_0_RREADY => compute_3_U0_m_axi_gmem4_0_RREADY,
        m_axi_gmem4_0_RDATA => gmem4_0_RDATA,
        m_axi_gmem4_0_RLAST => gmem4_0_RLAST,
        m_axi_gmem4_0_RID => gmem4_0_RID,
        m_axi_gmem4_0_RFIFONUM => gmem4_0_RFIFONUM,
        m_axi_gmem4_0_RUSER => gmem4_0_RUSER,
        m_axi_gmem4_0_RRESP => gmem4_0_RRESP,
        m_axi_gmem4_0_BVALID => ap_const_logic_0,
        m_axi_gmem4_0_BREADY => compute_3_U0_m_axi_gmem4_0_BREADY,
        m_axi_gmem4_0_BRESP => ap_const_lv2_0,
        m_axi_gmem4_0_BID => ap_const_lv1_0,
        m_axi_gmem4_0_BUSER => ap_const_lv1_0,
        this_weights => conv2_weights,
        m_axi_gmem5_0_AWVALID => compute_3_U0_m_axi_gmem5_0_AWVALID,
        m_axi_gmem5_0_AWREADY => ap_const_logic_0,
        m_axi_gmem5_0_AWADDR => compute_3_U0_m_axi_gmem5_0_AWADDR,
        m_axi_gmem5_0_AWID => compute_3_U0_m_axi_gmem5_0_AWID,
        m_axi_gmem5_0_AWLEN => compute_3_U0_m_axi_gmem5_0_AWLEN,
        m_axi_gmem5_0_AWSIZE => compute_3_U0_m_axi_gmem5_0_AWSIZE,
        m_axi_gmem5_0_AWBURST => compute_3_U0_m_axi_gmem5_0_AWBURST,
        m_axi_gmem5_0_AWLOCK => compute_3_U0_m_axi_gmem5_0_AWLOCK,
        m_axi_gmem5_0_AWCACHE => compute_3_U0_m_axi_gmem5_0_AWCACHE,
        m_axi_gmem5_0_AWPROT => compute_3_U0_m_axi_gmem5_0_AWPROT,
        m_axi_gmem5_0_AWQOS => compute_3_U0_m_axi_gmem5_0_AWQOS,
        m_axi_gmem5_0_AWREGION => compute_3_U0_m_axi_gmem5_0_AWREGION,
        m_axi_gmem5_0_AWUSER => compute_3_U0_m_axi_gmem5_0_AWUSER,
        m_axi_gmem5_0_WVALID => compute_3_U0_m_axi_gmem5_0_WVALID,
        m_axi_gmem5_0_WREADY => ap_const_logic_0,
        m_axi_gmem5_0_WDATA => compute_3_U0_m_axi_gmem5_0_WDATA,
        m_axi_gmem5_0_WSTRB => compute_3_U0_m_axi_gmem5_0_WSTRB,
        m_axi_gmem5_0_WLAST => compute_3_U0_m_axi_gmem5_0_WLAST,
        m_axi_gmem5_0_WID => compute_3_U0_m_axi_gmem5_0_WID,
        m_axi_gmem5_0_WUSER => compute_3_U0_m_axi_gmem5_0_WUSER,
        m_axi_gmem5_0_ARVALID => compute_3_U0_m_axi_gmem5_0_ARVALID,
        m_axi_gmem5_0_ARREADY => gmem5_0_ARREADY,
        m_axi_gmem5_0_ARADDR => compute_3_U0_m_axi_gmem5_0_ARADDR,
        m_axi_gmem5_0_ARID => compute_3_U0_m_axi_gmem5_0_ARID,
        m_axi_gmem5_0_ARLEN => compute_3_U0_m_axi_gmem5_0_ARLEN,
        m_axi_gmem5_0_ARSIZE => compute_3_U0_m_axi_gmem5_0_ARSIZE,
        m_axi_gmem5_0_ARBURST => compute_3_U0_m_axi_gmem5_0_ARBURST,
        m_axi_gmem5_0_ARLOCK => compute_3_U0_m_axi_gmem5_0_ARLOCK,
        m_axi_gmem5_0_ARCACHE => compute_3_U0_m_axi_gmem5_0_ARCACHE,
        m_axi_gmem5_0_ARPROT => compute_3_U0_m_axi_gmem5_0_ARPROT,
        m_axi_gmem5_0_ARQOS => compute_3_U0_m_axi_gmem5_0_ARQOS,
        m_axi_gmem5_0_ARREGION => compute_3_U0_m_axi_gmem5_0_ARREGION,
        m_axi_gmem5_0_ARUSER => compute_3_U0_m_axi_gmem5_0_ARUSER,
        m_axi_gmem5_0_RVALID => gmem5_0_RVALID,
        m_axi_gmem5_0_RREADY => compute_3_U0_m_axi_gmem5_0_RREADY,
        m_axi_gmem5_0_RDATA => gmem5_0_RDATA,
        m_axi_gmem5_0_RLAST => gmem5_0_RLAST,
        m_axi_gmem5_0_RID => gmem5_0_RID,
        m_axi_gmem5_0_RFIFONUM => gmem5_0_RFIFONUM,
        m_axi_gmem5_0_RUSER => gmem5_0_RUSER,
        m_axi_gmem5_0_RRESP => gmem5_0_RRESP,
        m_axi_gmem5_0_BVALID => ap_const_logic_0,
        m_axi_gmem5_0_BREADY => compute_3_U0_m_axi_gmem5_0_BREADY,
        m_axi_gmem5_0_BRESP => ap_const_lv2_0,
        m_axi_gmem5_0_BID => ap_const_lv1_0,
        m_axi_gmem5_0_BUSER => ap_const_lv1_0,
        this_bias => conv2_bias,
        conv1_out_dout => conv1_out_dout,
        conv1_out_empty_n => conv1_out_empty_n,
        conv1_out_read => compute_3_U0_conv1_out_read,
        conv1_out_num_data_valid => conv1_out_num_data_valid,
        conv1_out_fifo_cap => conv1_out_fifo_cap,
        conv2_out_din => compute_3_U0_conv2_out_din,
        conv2_out_full_n => conv2_out_full_n,
        conv2_out_write => compute_3_U0_conv2_out_write,
        conv2_out_num_data_valid => conv2_out_num_data_valid,
        conv2_out_fifo_cap => conv2_out_fifo_cap);

    compute_1_U0 : component cnn_top_compute_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_1_U0_ap_start,
        ap_done => compute_1_U0_ap_done,
        ap_continue => compute_1_U0_ap_continue,
        ap_idle => compute_1_U0_ap_idle,
        ap_ready => compute_1_U0_ap_ready,
        conv2_out_dout => conv2_out_dout,
        conv2_out_empty_n => conv2_out_empty_n,
        conv2_out_read => compute_1_U0_conv2_out_read,
        conv2_out_num_data_valid => conv2_out_num_data_valid,
        conv2_out_fifo_cap => conv2_out_fifo_cap,
        pool1_out_din => compute_1_U0_pool1_out_din,
        pool1_out_full_n => pool1_out_full_n,
        pool1_out_write => compute_1_U0_pool1_out_write,
        pool1_out_num_data_valid => compute_1_U0_pool1_out_num_data_valid,
        pool1_out_fifo_cap => compute_1_U0_pool1_out_fifo_cap);

    compute_2_U0 : component cnn_top_compute_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_2_U0_ap_start,
        start_full_n => start_for_compute_U0_full_n,
        ap_done => compute_2_U0_ap_done,
        ap_continue => compute_2_U0_ap_continue,
        ap_idle => compute_2_U0_ap_idle,
        ap_ready => compute_2_U0_ap_ready,
        start_out => compute_2_U0_start_out,
        start_write => compute_2_U0_start_write,
        m_axi_gmem6_0_AWVALID => compute_2_U0_m_axi_gmem6_0_AWVALID,
        m_axi_gmem6_0_AWREADY => ap_const_logic_0,
        m_axi_gmem6_0_AWADDR => compute_2_U0_m_axi_gmem6_0_AWADDR,
        m_axi_gmem6_0_AWID => compute_2_U0_m_axi_gmem6_0_AWID,
        m_axi_gmem6_0_AWLEN => compute_2_U0_m_axi_gmem6_0_AWLEN,
        m_axi_gmem6_0_AWSIZE => compute_2_U0_m_axi_gmem6_0_AWSIZE,
        m_axi_gmem6_0_AWBURST => compute_2_U0_m_axi_gmem6_0_AWBURST,
        m_axi_gmem6_0_AWLOCK => compute_2_U0_m_axi_gmem6_0_AWLOCK,
        m_axi_gmem6_0_AWCACHE => compute_2_U0_m_axi_gmem6_0_AWCACHE,
        m_axi_gmem6_0_AWPROT => compute_2_U0_m_axi_gmem6_0_AWPROT,
        m_axi_gmem6_0_AWQOS => compute_2_U0_m_axi_gmem6_0_AWQOS,
        m_axi_gmem6_0_AWREGION => compute_2_U0_m_axi_gmem6_0_AWREGION,
        m_axi_gmem6_0_AWUSER => compute_2_U0_m_axi_gmem6_0_AWUSER,
        m_axi_gmem6_0_WVALID => compute_2_U0_m_axi_gmem6_0_WVALID,
        m_axi_gmem6_0_WREADY => ap_const_logic_0,
        m_axi_gmem6_0_WDATA => compute_2_U0_m_axi_gmem6_0_WDATA,
        m_axi_gmem6_0_WSTRB => compute_2_U0_m_axi_gmem6_0_WSTRB,
        m_axi_gmem6_0_WLAST => compute_2_U0_m_axi_gmem6_0_WLAST,
        m_axi_gmem6_0_WID => compute_2_U0_m_axi_gmem6_0_WID,
        m_axi_gmem6_0_WUSER => compute_2_U0_m_axi_gmem6_0_WUSER,
        m_axi_gmem6_0_ARVALID => compute_2_U0_m_axi_gmem6_0_ARVALID,
        m_axi_gmem6_0_ARREADY => gmem6_0_ARREADY,
        m_axi_gmem6_0_ARADDR => compute_2_U0_m_axi_gmem6_0_ARADDR,
        m_axi_gmem6_0_ARID => compute_2_U0_m_axi_gmem6_0_ARID,
        m_axi_gmem6_0_ARLEN => compute_2_U0_m_axi_gmem6_0_ARLEN,
        m_axi_gmem6_0_ARSIZE => compute_2_U0_m_axi_gmem6_0_ARSIZE,
        m_axi_gmem6_0_ARBURST => compute_2_U0_m_axi_gmem6_0_ARBURST,
        m_axi_gmem6_0_ARLOCK => compute_2_U0_m_axi_gmem6_0_ARLOCK,
        m_axi_gmem6_0_ARCACHE => compute_2_U0_m_axi_gmem6_0_ARCACHE,
        m_axi_gmem6_0_ARPROT => compute_2_U0_m_axi_gmem6_0_ARPROT,
        m_axi_gmem6_0_ARQOS => compute_2_U0_m_axi_gmem6_0_ARQOS,
        m_axi_gmem6_0_ARREGION => compute_2_U0_m_axi_gmem6_0_ARREGION,
        m_axi_gmem6_0_ARUSER => compute_2_U0_m_axi_gmem6_0_ARUSER,
        m_axi_gmem6_0_RVALID => gmem6_0_RVALID,
        m_axi_gmem6_0_RREADY => compute_2_U0_m_axi_gmem6_0_RREADY,
        m_axi_gmem6_0_RDATA => gmem6_0_RDATA,
        m_axi_gmem6_0_RLAST => gmem6_0_RLAST,
        m_axi_gmem6_0_RID => gmem6_0_RID,
        m_axi_gmem6_0_RFIFONUM => gmem6_0_RFIFONUM,
        m_axi_gmem6_0_RUSER => gmem6_0_RUSER,
        m_axi_gmem6_0_RRESP => gmem6_0_RRESP,
        m_axi_gmem6_0_BVALID => ap_const_logic_0,
        m_axi_gmem6_0_BREADY => compute_2_U0_m_axi_gmem6_0_BREADY,
        m_axi_gmem6_0_BRESP => ap_const_lv2_0,
        m_axi_gmem6_0_BID => ap_const_lv1_0,
        m_axi_gmem6_0_BUSER => ap_const_lv1_0,
        this_weights => conv3_weights,
        m_axi_gmem7_0_AWVALID => compute_2_U0_m_axi_gmem7_0_AWVALID,
        m_axi_gmem7_0_AWREADY => ap_const_logic_0,
        m_axi_gmem7_0_AWADDR => compute_2_U0_m_axi_gmem7_0_AWADDR,
        m_axi_gmem7_0_AWID => compute_2_U0_m_axi_gmem7_0_AWID,
        m_axi_gmem7_0_AWLEN => compute_2_U0_m_axi_gmem7_0_AWLEN,
        m_axi_gmem7_0_AWSIZE => compute_2_U0_m_axi_gmem7_0_AWSIZE,
        m_axi_gmem7_0_AWBURST => compute_2_U0_m_axi_gmem7_0_AWBURST,
        m_axi_gmem7_0_AWLOCK => compute_2_U0_m_axi_gmem7_0_AWLOCK,
        m_axi_gmem7_0_AWCACHE => compute_2_U0_m_axi_gmem7_0_AWCACHE,
        m_axi_gmem7_0_AWPROT => compute_2_U0_m_axi_gmem7_0_AWPROT,
        m_axi_gmem7_0_AWQOS => compute_2_U0_m_axi_gmem7_0_AWQOS,
        m_axi_gmem7_0_AWREGION => compute_2_U0_m_axi_gmem7_0_AWREGION,
        m_axi_gmem7_0_AWUSER => compute_2_U0_m_axi_gmem7_0_AWUSER,
        m_axi_gmem7_0_WVALID => compute_2_U0_m_axi_gmem7_0_WVALID,
        m_axi_gmem7_0_WREADY => ap_const_logic_0,
        m_axi_gmem7_0_WDATA => compute_2_U0_m_axi_gmem7_0_WDATA,
        m_axi_gmem7_0_WSTRB => compute_2_U0_m_axi_gmem7_0_WSTRB,
        m_axi_gmem7_0_WLAST => compute_2_U0_m_axi_gmem7_0_WLAST,
        m_axi_gmem7_0_WID => compute_2_U0_m_axi_gmem7_0_WID,
        m_axi_gmem7_0_WUSER => compute_2_U0_m_axi_gmem7_0_WUSER,
        m_axi_gmem7_0_ARVALID => compute_2_U0_m_axi_gmem7_0_ARVALID,
        m_axi_gmem7_0_ARREADY => gmem7_0_ARREADY,
        m_axi_gmem7_0_ARADDR => compute_2_U0_m_axi_gmem7_0_ARADDR,
        m_axi_gmem7_0_ARID => compute_2_U0_m_axi_gmem7_0_ARID,
        m_axi_gmem7_0_ARLEN => compute_2_U0_m_axi_gmem7_0_ARLEN,
        m_axi_gmem7_0_ARSIZE => compute_2_U0_m_axi_gmem7_0_ARSIZE,
        m_axi_gmem7_0_ARBURST => compute_2_U0_m_axi_gmem7_0_ARBURST,
        m_axi_gmem7_0_ARLOCK => compute_2_U0_m_axi_gmem7_0_ARLOCK,
        m_axi_gmem7_0_ARCACHE => compute_2_U0_m_axi_gmem7_0_ARCACHE,
        m_axi_gmem7_0_ARPROT => compute_2_U0_m_axi_gmem7_0_ARPROT,
        m_axi_gmem7_0_ARQOS => compute_2_U0_m_axi_gmem7_0_ARQOS,
        m_axi_gmem7_0_ARREGION => compute_2_U0_m_axi_gmem7_0_ARREGION,
        m_axi_gmem7_0_ARUSER => compute_2_U0_m_axi_gmem7_0_ARUSER,
        m_axi_gmem7_0_RVALID => gmem7_0_RVALID,
        m_axi_gmem7_0_RREADY => compute_2_U0_m_axi_gmem7_0_RREADY,
        m_axi_gmem7_0_RDATA => gmem7_0_RDATA,
        m_axi_gmem7_0_RLAST => gmem7_0_RLAST,
        m_axi_gmem7_0_RID => gmem7_0_RID,
        m_axi_gmem7_0_RFIFONUM => gmem7_0_RFIFONUM,
        m_axi_gmem7_0_RUSER => gmem7_0_RUSER,
        m_axi_gmem7_0_RRESP => gmem7_0_RRESP,
        m_axi_gmem7_0_BVALID => ap_const_logic_0,
        m_axi_gmem7_0_BREADY => compute_2_U0_m_axi_gmem7_0_BREADY,
        m_axi_gmem7_0_BRESP => ap_const_lv2_0,
        m_axi_gmem7_0_BID => ap_const_lv1_0,
        m_axi_gmem7_0_BUSER => ap_const_lv1_0,
        this_bias => conv3_bias,
        pool1_out_dout => pool1_out_dout,
        pool1_out_empty_n => pool1_out_empty_n,
        pool1_out_read => compute_2_U0_pool1_out_read,
        pool1_out_num_data_valid => pool1_out_num_data_valid,
        pool1_out_fifo_cap => pool1_out_fifo_cap,
        conv3_out_din => compute_2_U0_conv3_out_din,
        conv3_out_full_n => conv3_out_full_n,
        conv3_out_write => compute_2_U0_conv3_out_write,
        conv3_out_num_data_valid => conv3_out_num_data_valid,
        conv3_out_fifo_cap => conv3_out_fifo_cap);

    compute_U0 : component cnn_top_compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_U0_ap_start,
        ap_done => compute_U0_ap_done,
        ap_continue => compute_U0_ap_continue,
        ap_idle => compute_U0_ap_idle,
        ap_ready => compute_U0_ap_ready,
        conv3_out_dout => conv3_out_dout,
        conv3_out_empty_n => conv3_out_empty_n,
        conv3_out_read => compute_U0_conv3_out_read,
        conv3_out_num_data_valid => conv3_out_num_data_valid,
        conv3_out_fifo_cap => conv3_out_fifo_cap,
        output_s_din => compute_U0_output_s_din,
        output_s_full_n => output_s_full_n,
        output_s_write => compute_U0_output_s_write,
        output_s_num_data_valid => compute_U0_output_s_num_data_valid,
        output_s_fifo_cap => compute_U0_output_s_fifo_cap);

    Block_entry_gmem1_wr_proc_U0 : component cnn_top_Block_entry_gmem1_wr_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_entry_gmem1_wr_proc_U0_ap_start,
        ap_done => Block_entry_gmem1_wr_proc_U0_ap_done,
        ap_continue => Block_entry_gmem1_wr_proc_U0_ap_continue,
        ap_idle => Block_entry_gmem1_wr_proc_U0_ap_idle,
        ap_ready => Block_entry_gmem1_wr_proc_U0_ap_ready,
        output_r_dout => output_r_c_dout,
        output_r_empty_n => output_r_c_empty_n,
        output_r_read => Block_entry_gmem1_wr_proc_U0_output_r_read,
        output_r_num_data_valid => output_r_c_num_data_valid,
        output_r_fifo_cap => output_r_c_fifo_cap,
        m_axi_gmem1_0_AWVALID => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY => gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY => gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY => ap_const_logic_0,
        m_axi_gmem1_0_ARADDR => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID => ap_const_logic_0,
        m_axi_gmem1_0_RREADY => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA => ap_const_lv16_0,
        m_axi_gmem1_0_RLAST => ap_const_logic_0,
        m_axi_gmem1_0_RID => ap_const_lv1_0,
        m_axi_gmem1_0_RFIFONUM => ap_const_lv11_0,
        m_axi_gmem1_0_RUSER => ap_const_lv1_0,
        m_axi_gmem1_0_RRESP => ap_const_lv2_0,
        m_axi_gmem1_0_BVALID => gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY => Block_entry_gmem1_wr_proc_U0_m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP => gmem1_0_BRESP,
        m_axi_gmem1_0_BID => gmem1_0_BID,
        m_axi_gmem1_0_BUSER => gmem1_0_BUSER,
        output_s_dout => output_s_dout,
        output_s_empty_n => output_s_empty_n,
        output_s_read => Block_entry_gmem1_wr_proc_U0_output_s_read,
        output_s_num_data_valid => output_s_num_data_valid,
        output_s_fifo_cap => output_s_fifo_cap);

    output_r_c_U : component cnn_top_fifo_w32_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_output_r_c_din,
        if_full_n => output_r_c_full_n,
        if_write => entry_proc_U0_output_r_c_write,
        if_dout => output_r_c_dout,
        if_empty_n => output_r_c_empty_n,
        if_read => Block_entry_gmem1_wr_proc_U0_output_r_read,
        if_num_data_valid => output_r_c_num_data_valid,
        if_fifo_cap => output_r_c_fifo_cap);

    input_s_U : component cnn_top_fifo_w16_d256_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_top_U0_input_s_din,
        if_full_n => input_s_full_n,
        if_write => read_input_top_U0_input_s_write,
        if_dout => input_s_dout,
        if_empty_n => input_s_empty_n,
        if_read => compute_4_U0_input_s_read,
        if_num_data_valid => input_s_num_data_valid,
        if_fifo_cap => input_s_fifo_cap);

    conv1_out_U : component cnn_top_fifo_w16_d8192_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_4_U0_conv1_out_din,
        if_full_n => conv1_out_full_n,
        if_write => compute_4_U0_conv1_out_write,
        if_dout => conv1_out_dout,
        if_empty_n => conv1_out_empty_n,
        if_read => compute_3_U0_conv1_out_read,
        if_num_data_valid => conv1_out_num_data_valid,
        if_fifo_cap => conv1_out_fifo_cap);

    conv2_out_U : component cnn_top_fifo_w16_d8192_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_3_U0_conv2_out_din,
        if_full_n => conv2_out_full_n,
        if_write => compute_3_U0_conv2_out_write,
        if_dout => conv2_out_dout,
        if_empty_n => conv2_out_empty_n,
        if_read => compute_1_U0_conv2_out_read,
        if_num_data_valid => conv2_out_num_data_valid,
        if_fifo_cap => conv2_out_fifo_cap);

    pool1_out_U : component cnn_top_fifo_w16_d2048_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_1_U0_pool1_out_din,
        if_full_n => pool1_out_full_n,
        if_write => compute_1_U0_pool1_out_write,
        if_dout => pool1_out_dout,
        if_empty_n => pool1_out_empty_n,
        if_read => compute_2_U0_pool1_out_read,
        if_num_data_valid => pool1_out_num_data_valid,
        if_fifo_cap => pool1_out_fifo_cap);

    conv3_out_U : component cnn_top_fifo_w16_d2048_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_2_U0_conv3_out_din,
        if_full_n => conv3_out_full_n,
        if_write => compute_2_U0_conv3_out_write,
        if_dout => conv3_out_dout,
        if_empty_n => conv3_out_empty_n,
        if_read => compute_U0_conv3_out_read,
        if_num_data_valid => conv3_out_num_data_valid,
        if_fifo_cap => conv3_out_fifo_cap);

    output_s_U : component cnn_top_fifo_w16_d512_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_U0_output_s_din,
        if_full_n => output_s_full_n,
        if_write => compute_U0_output_s_write,
        if_dout => output_s_dout,
        if_empty_n => output_s_empty_n,
        if_read => Block_entry_gmem1_wr_proc_U0_output_s_read,
        if_num_data_valid => output_s_num_data_valid,
        if_fifo_cap => output_s_fifo_cap);

    start_for_Block_entry_gmem1_wr_proc_U0_U : component cnn_top_start_for_Block_entry_gmem1_wr_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_entry_gmem1_wr_proc_U0_din,
        if_full_n => start_for_Block_entry_gmem1_wr_proc_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_Block_entry_gmem1_wr_proc_U0_dout,
        if_empty_n => start_for_Block_entry_gmem1_wr_proc_U0_empty_n,
        if_read => Block_entry_gmem1_wr_proc_U0_ap_ready);

    start_for_compute_1_U0_U : component cnn_top_start_for_compute_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compute_1_U0_din,
        if_full_n => start_for_compute_1_U0_full_n,
        if_write => compute_3_U0_start_write,
        if_dout => start_for_compute_1_U0_dout,
        if_empty_n => start_for_compute_1_U0_empty_n,
        if_read => compute_1_U0_ap_ready);

    start_for_compute_U0_U : component cnn_top_start_for_compute_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compute_U0_din,
        if_full_n => start_for_compute_U0_full_n,
        if_write => compute_2_U0_start_write,
        if_dout => start_for_compute_U0_dout,
        if_empty_n => start_for_compute_U0_empty_n,
        if_read => compute_U0_ap_ready);





    ap_sync_reg_compute_2_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_compute_2_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_compute_2_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_compute_2_U0_ap_ready <= ap_sync_compute_2_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_compute_3_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_compute_3_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_compute_3_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_compute_3_U0_ap_ready <= ap_sync_compute_3_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_compute_4_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_compute_4_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_compute_4_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_compute_4_U0_ap_ready <= ap_sync_compute_4_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_input_top_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_read_input_top_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_input_top_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_input_top_U0_ap_ready <= ap_sync_read_input_top_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    Block_entry_gmem1_wr_proc_U0_ap_continue <= ap_const_logic_1;
    Block_entry_gmem1_wr_proc_U0_ap_start <= start_for_Block_entry_gmem1_wr_proc_U0_empty_n;
    ap_done <= Block_entry_gmem1_wr_proc_U0_ap_done;
    ap_idle <= (read_input_top_U0_ap_idle and entry_proc_U0_ap_idle and compute_U0_ap_idle and compute_4_U0_ap_idle and compute_3_U0_ap_idle and compute_2_U0_ap_idle and compute_1_U0_ap_idle and Block_entry_gmem1_wr_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_compute_2_U0_ap_ready <= (compute_2_U0_ap_ready or ap_sync_reg_compute_2_U0_ap_ready);
    ap_sync_compute_3_U0_ap_ready <= (compute_3_U0_ap_ready or ap_sync_reg_compute_3_U0_ap_ready);
    ap_sync_compute_4_U0_ap_ready <= (compute_4_U0_ap_ready or ap_sync_reg_compute_4_U0_ap_ready);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_read_input_top_U0_ap_ready <= (read_input_top_U0_ap_ready or ap_sync_reg_read_input_top_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_input_top_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready and ap_sync_compute_4_U0_ap_ready and ap_sync_compute_3_U0_ap_ready and ap_sync_compute_2_U0_ap_ready);
    compute_1_U0_ap_continue <= ap_const_logic_1;
    compute_1_U0_ap_start <= start_for_compute_1_U0_empty_n;
    compute_1_U0_pool1_out_fifo_cap <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(IEEE.numeric_std.resize(unsigned(pool1_out_fifo_cap),12))),32));
    compute_1_U0_pool1_out_num_data_valid <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(IEEE.numeric_std.resize(unsigned(pool1_out_num_data_valid),12))),32));
    compute_2_U0_ap_continue <= ap_const_logic_1;
    compute_2_U0_ap_start <= ((ap_sync_reg_compute_2_U0_ap_ready xor ap_const_logic_1) and ap_start and ap_const_logic_1);
    compute_3_U0_ap_continue <= ap_const_logic_1;
    compute_3_U0_ap_start <= ((ap_sync_reg_compute_3_U0_ap_ready xor ap_const_logic_1) and ap_start and ap_const_logic_1);
    compute_4_U0_ap_continue <= ap_const_logic_1;
    compute_4_U0_ap_start <= ((ap_sync_reg_compute_4_U0_ap_ready xor ap_const_logic_1) and ap_start and ap_const_logic_1);
    compute_U0_ap_continue <= ap_const_logic_1;
    compute_U0_ap_start <= start_for_compute_U0_empty_n;
    compute_U0_output_s_fifo_cap <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(IEEE.numeric_std.resize(unsigned(output_s_fifo_cap),10))),32));
    compute_U0_output_s_num_data_valid <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(IEEE.numeric_std.resize(unsigned(output_s_num_data_valid),10))),32));
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start and ap_const_logic_1);
    gmem0_0_RID <= ap_const_lv1_0;
    gmem0_0_RLAST <= ap_const_logic_0;
    gmem0_0_RRESP <= ap_const_lv2_0;
    gmem0_0_RUSER <= ap_const_lv1_0;
    gmem1_0_BID <= ap_const_lv1_0;
    gmem1_0_BRESP <= ap_const_lv2_0;
    gmem1_0_BUSER <= ap_const_lv1_0;
    gmem2_0_RID <= ap_const_lv1_0;
    gmem2_0_RLAST <= ap_const_logic_0;
    gmem2_0_RRESP <= ap_const_lv2_0;
    gmem2_0_RUSER <= ap_const_lv1_0;
    gmem3_0_RID <= ap_const_lv1_0;
    gmem3_0_RLAST <= ap_const_logic_0;
    gmem3_0_RRESP <= ap_const_lv2_0;
    gmem3_0_RUSER <= ap_const_lv1_0;
    gmem4_0_RID <= ap_const_lv1_0;
    gmem4_0_RLAST <= ap_const_logic_0;
    gmem4_0_RRESP <= ap_const_lv2_0;
    gmem4_0_RUSER <= ap_const_lv1_0;
    gmem5_0_RID <= ap_const_lv1_0;
    gmem5_0_RLAST <= ap_const_logic_0;
    gmem5_0_RRESP <= ap_const_lv2_0;
    gmem5_0_RUSER <= ap_const_lv1_0;
    gmem6_0_RID <= ap_const_lv1_0;
    gmem6_0_RLAST <= ap_const_logic_0;
    gmem6_0_RRESP <= ap_const_lv2_0;
    gmem6_0_RUSER <= ap_const_lv1_0;
    gmem7_0_RID <= ap_const_lv1_0;
    gmem7_0_RLAST <= ap_const_logic_0;
    gmem7_0_RRESP <= ap_const_lv2_0;
    gmem7_0_RUSER <= ap_const_lv1_0;
    read_input_top_U0_ap_continue <= ap_const_logic_1;
    read_input_top_U0_ap_start <= ((ap_sync_reg_read_input_top_U0_ap_ready xor ap_const_logic_1) and ap_start and ap_const_logic_1);
    start_for_Block_entry_gmem1_wr_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_compute_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_compute_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
