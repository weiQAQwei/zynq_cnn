// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_top_compute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        conv3_out_dout,
        conv3_out_empty_n,
        conv3_out_read,
        conv3_out_num_data_valid,
        conv3_out_fifo_cap,
        output_s_din,
        output_s_full_n,
        output_s_write,
        output_s_num_data_valid,
        output_s_fifo_cap
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] conv3_out_dout;
input   conv3_out_empty_n;
output   conv3_out_read;
input  [11:0] conv3_out_num_data_valid;
input  [11:0] conv3_out_fifo_cap;
output  [15:0] output_s_din;
input   output_s_full_n;
output   output_s_write;
input  [31:0] output_s_num_data_valid;
input  [31:0] output_s_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] input_buf_address0;
reg    input_buf_ce0;
reg    input_buf_we0;
wire   [15:0] input_buf_q0;
reg    input_buf_ce1;
wire   [15:0] input_buf_q1;
wire    grp_read_input_func_fu_24_ap_start;
wire    grp_read_input_func_fu_24_ap_done;
wire    grp_read_input_func_fu_24_ap_idle;
wire    grp_read_input_func_fu_24_ap_ready;
wire    grp_read_input_func_fu_24_conv3_out_read;
wire   [10:0] grp_read_input_func_fu_24_input_buf_address0;
wire    grp_read_input_func_fu_24_input_buf_ce0;
wire    grp_read_input_func_fu_24_input_buf_we0;
wire   [15:0] grp_read_input_func_fu_24_input_buf_d0;
wire    grp_pooling_func_fu_32_ap_start;
wire    grp_pooling_func_fu_32_ap_done;
wire    grp_pooling_func_fu_32_ap_idle;
wire    grp_pooling_func_fu_32_ap_ready;
wire   [15:0] grp_pooling_func_fu_32_output_s_din;
wire    grp_pooling_func_fu_32_output_s_write;
wire   [10:0] grp_pooling_func_fu_32_input_buf_address0;
wire    grp_pooling_func_fu_32_input_buf_ce0;
wire   [10:0] grp_pooling_func_fu_32_input_buf_address1;
wire    grp_pooling_func_fu_32_input_buf_ce1;
reg    grp_read_input_func_fu_24_ap_start_reg;
reg    ap_block_state1_ignore_call3;
wire    ap_CS_fsm_state2;
reg    grp_pooling_func_fu_32_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_read_input_func_fu_24_ap_start_reg = 1'b0;
#0 grp_pooling_func_fu_32_ap_start_reg = 1'b0;
end

cnn_top_compute_input_buf_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 2048 ),
    .AddressWidth( 11 ))
input_buf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(input_buf_address0),
    .ce0(input_buf_ce0),
    .we0(input_buf_we0),
    .d0(grp_read_input_func_fu_24_input_buf_d0),
    .q0(input_buf_q0),
    .address1(grp_pooling_func_fu_32_input_buf_address1),
    .ce1(input_buf_ce1),
    .q1(input_buf_q1)
);

cnn_top_read_input_func grp_read_input_func_fu_24(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_read_input_func_fu_24_ap_start),
    .ap_done(grp_read_input_func_fu_24_ap_done),
    .ap_idle(grp_read_input_func_fu_24_ap_idle),
    .ap_ready(grp_read_input_func_fu_24_ap_ready),
    .conv3_out_dout(conv3_out_dout),
    .conv3_out_empty_n(conv3_out_empty_n),
    .conv3_out_read(grp_read_input_func_fu_24_conv3_out_read),
    .conv3_out_num_data_valid(12'd0),
    .conv3_out_fifo_cap(12'd0),
    .input_buf_address0(grp_read_input_func_fu_24_input_buf_address0),
    .input_buf_ce0(grp_read_input_func_fu_24_input_buf_ce0),
    .input_buf_we0(grp_read_input_func_fu_24_input_buf_we0),
    .input_buf_d0(grp_read_input_func_fu_24_input_buf_d0)
);

cnn_top_pooling_func grp_pooling_func_fu_32(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pooling_func_fu_32_ap_start),
    .ap_done(grp_pooling_func_fu_32_ap_done),
    .ap_idle(grp_pooling_func_fu_32_ap_idle),
    .ap_ready(grp_pooling_func_fu_32_ap_ready),
    .output_s_din(grp_pooling_func_fu_32_output_s_din),
    .output_s_full_n(output_s_full_n),
    .output_s_write(grp_pooling_func_fu_32_output_s_write),
    .output_s_num_data_valid(output_s_num_data_valid),
    .output_s_fifo_cap(output_s_fifo_cap),
    .input_buf_address0(grp_pooling_func_fu_32_input_buf_address0),
    .input_buf_ce0(grp_pooling_func_fu_32_input_buf_ce0),
    .input_buf_q0(input_buf_q0),
    .input_buf_address1(grp_pooling_func_fu_32_input_buf_address1),
    .input_buf_ce1(grp_pooling_func_fu_32_input_buf_ce1),
    .input_buf_q1(input_buf_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_pooling_func_fu_32_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pooling_func_fu_32_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_pooling_func_fu_32_ap_start_reg <= 1'b1;
        end else if ((grp_pooling_func_fu_32_ap_ready == 1'b1)) begin
            grp_pooling_func_fu_32_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_read_input_func_fu_24_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1_ignore_call3))) begin
            grp_read_input_func_fu_24_ap_start_reg <= 1'b1;
        end else if ((grp_read_input_func_fu_24_ap_ready == 1'b1)) begin
            grp_read_input_func_fu_24_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_read_input_func_fu_24_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_pooling_func_fu_32_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pooling_func_fu_32_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_pooling_func_fu_32_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_buf_address0 = grp_pooling_func_fu_32_input_buf_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buf_address0 = grp_read_input_func_fu_24_input_buf_address0;
    end else begin
        input_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_buf_ce0 = grp_pooling_func_fu_32_input_buf_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buf_ce0 = grp_read_input_func_fu_24_input_buf_ce0;
    end else begin
        input_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_buf_ce1 = grp_pooling_func_fu_32_input_buf_ce1;
    end else begin
        input_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_buf_we0 = grp_read_input_func_fu_24_input_buf_we0;
    end else begin
        input_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_read_input_func_fu_24_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_pooling_func_fu_32_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call3 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign conv3_out_read = grp_read_input_func_fu_24_conv3_out_read;

assign grp_pooling_func_fu_32_ap_start = grp_pooling_func_fu_32_ap_start_reg;

assign grp_read_input_func_fu_24_ap_start = grp_read_input_func_fu_24_ap_start_reg;

assign output_s_din = grp_pooling_func_fu_32_output_s_din;

assign output_s_write = grp_pooling_func_fu_32_output_s_write;

endmodule //cnn_top_compute
