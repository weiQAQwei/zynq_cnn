-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_pooling_func is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_s_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_s_full_n : IN STD_LOGIC;
    output_s_write : OUT STD_LOGIC;
    output_s_num_data_valid : IN STD_LOGIC_VECTOR (31 downto 0);
    output_s_fifo_cap : IN STD_LOGIC_VECTOR (31 downto 0);
    input_buf_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_buf_ce0 : OUT STD_LOGIC;
    input_buf_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_buf_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_buf_ce1 : OUT STD_LOGIC;
    input_buf_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of cnn_top_pooling_func is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln155_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal output_s_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_grp1 : BOOLEAN;
    signal icmp_ln155_reg_454 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_49_fu_257_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_49_reg_458 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal empty_50_fu_261_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_50_reg_464 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln160_fu_265_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln160_reg_470 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal max_val_fu_385_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_val_reg_496 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_val_9_fu_411_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_val_9_reg_502 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal zext_ln160_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln163_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln163_3_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln163_4_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_58 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln158_fu_307_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_11001_grp0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone_grp0_done_reg : BOOLEAN := false;
    signal ap_block_pp0_stage0_subdone_grp0 : BOOLEAN;
    signal j_fu_62 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln157_fu_249_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_66 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln157_2_fu_319_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_fu_70 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln155_2_fu_221_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten12_fu_74 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln155_2_fu_160_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten12_load : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001_grp1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_grp1 : BOOLEAN;
    signal input_buf_ce1_local : STD_LOGIC;
    signal input_buf_address1_local : STD_LOGIC_VECTOR (10 downto 0);
    signal input_buf_ce0_local : STD_LOGIC;
    signal input_buf_address0_local : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln157_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln155_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln155_fu_183_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln155_fu_195_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln155_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln157_fu_229_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_mid2_fu_241_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_269_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_288_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln157_2_fu_313_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_347_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_363_p6 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln164_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal icmp_ln164_1_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_8_fu_398_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln164_2_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cnn_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_block_pp0_stage0_subdone_grp0_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0)) then 
                        ap_block_pp0_stage0_subdone_grp0_done_reg <= ap_const_boolean_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    c_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                c_fu_58 <= ap_const_lv6_0;
            elsif (((icmp_ln155_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                c_fu_58 <= add_ln158_fu_307_p2;
            end if; 
        end if;
    end process;

    i_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_70 <= ap_const_lv3_0;
            elsif (((icmp_ln155_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_70 <= select_ln155_2_fu_221_p3;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln155_fu_154_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten12_fu_74 <= add_ln155_2_fu_160_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten12_fu_74 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                indvar_flatten_fu_66 <= ap_const_lv9_0;
            elsif (((icmp_ln155_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                indvar_flatten_fu_66 <= select_ln157_2_fu_319_p3;
            end if; 
        end if;
    end process;

    j_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone_grp0_done_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                j_fu_62 <= ap_const_lv3_0;
            elsif (((icmp_ln155_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                j_fu_62 <= select_ln157_fu_249_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                empty_49_reg_458 <= empty_49_fu_257_p1;
                empty_50_reg_464 <= empty_50_fu_261_p1;
                trunc_ln160_reg_470 <= trunc_ln160_fu_265_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln155_reg_454 <= icmp_ln155_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                max_val_9_reg_502 <= max_val_9_fu_411_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                max_val_reg_496 <= max_val_fu_385_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage3_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln155_2_fu_160_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten12_load) + unsigned(ap_const_lv10_1));
    add_ln155_fu_183_p2 <= std_logic_vector(unsigned(i_fu_70) + unsigned(ap_const_lv3_1));
    add_ln157_2_fu_313_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_66) + unsigned(ap_const_lv9_1));
    add_ln157_fu_229_p2 <= std_logic_vector(unsigned(select_ln155_fu_195_p3) + unsigned(ap_const_lv3_1));
    add_ln158_fu_307_p2 <= std_logic_vector(unsigned(c_mid2_fu_241_p3) + unsigned(ap_const_lv6_1));
    and_ln155_fu_215_p2 <= (xor_ln155_fu_203_p2 and icmp_ln158_fu_209_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, output_s_full_n)
    begin
                ap_block_pp0_stage0_01001_grp1 <= ((output_s_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, output_s_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((output_s_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_11001_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter1, output_s_full_n)
    begin
                ap_block_pp0_stage0_11001_grp1 <= ((output_s_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, output_s_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((output_s_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage0_subdone_grp0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln155_fu_154_p2)
    begin
        if (((icmp_ln155_fu_154_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten12_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, indvar_flatten12_fu_74, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten12_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten12_load <= indvar_flatten12_fu_74;
        end if; 
    end process;

    c_mid2_fu_241_p3 <= 
        ap_const_lv6_0 when (empty_fu_235_p2(0) = '1') else 
        c_fu_58;
    empty_49_fu_257_p1 <= select_ln155_2_fu_221_p3(2 - 1 downto 0);
    empty_50_fu_261_p1 <= select_ln157_fu_249_p3(2 - 1 downto 0);
    empty_fu_235_p2 <= (icmp_ln157_fu_189_p2 or and_ln155_fu_215_p2);
    icmp_ln155_fu_154_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten12_load = ap_const_lv10_200) else "0";
    icmp_ln157_fu_189_p2 <= "1" when (indvar_flatten_fu_66 = ap_const_lv9_80) else "0";
    icmp_ln158_fu_209_p2 <= "1" when (c_fu_58 = ap_const_lv6_20) else "0";
    icmp_ln164_1_fu_393_p2 <= "1" when (signed(input_buf_q1) > signed(max_val_reg_496)) else "0";
    icmp_ln164_2_fu_405_p2 <= "1" when (signed(input_buf_q0) > signed(max_val_8_fu_398_p3)) else "0";
    icmp_ln164_fu_379_p2 <= "1" when (signed(input_buf_q0) > signed(input_buf_q1)) else "0";
    input_buf_address0 <= input_buf_address0_local;

    input_buf_address0_local_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1, zext_ln163_fu_302_p1, ap_block_pp0_stage2, zext_ln163_4_fu_374_p1)
    begin
        if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_buf_address0_local <= zext_ln163_4_fu_374_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_buf_address0_local <= zext_ln163_fu_302_p1(11 - 1 downto 0);
            else 
                input_buf_address0_local <= "XXXXXXXXXXX";
            end if;
        else 
            input_buf_address0_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    input_buf_address1 <= input_buf_address1_local;

    input_buf_address1_local_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln160_fu_283_p1, ap_block_pp0_stage1, zext_ln163_3_fu_358_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_buf_address1_local <= zext_ln163_3_fu_358_p1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_buf_address1_local <= zext_ln160_fu_283_p1(11 - 1 downto 0);
            else 
                input_buf_address1_local <= "XXXXXXXXXXX";
            end if;
        else 
            input_buf_address1_local <= "XXXXXXXXXXX";
        end if; 
    end process;

    input_buf_ce0 <= input_buf_ce0_local;

    input_buf_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_buf_ce0_local <= ap_const_logic_1;
        else 
            input_buf_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    input_buf_ce1 <= input_buf_ce1_local;

    input_buf_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_buf_ce1_local <= ap_const_logic_1;
        else 
            input_buf_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    max_val_8_fu_398_p3 <= 
        input_buf_q1 when (icmp_ln164_1_fu_393_p2(0) = '1') else 
        max_val_reg_496;
    max_val_9_fu_411_p3 <= 
        input_buf_q0 when (icmp_ln164_2_fu_405_p2(0) = '1') else 
        max_val_8_fu_398_p3;
    max_val_fu_385_p3 <= 
        input_buf_q0 when (icmp_ln164_fu_379_p2(0) = '1') else 
        input_buf_q1;

    output_s_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, output_s_full_n, ap_block_pp0_stage0_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_s_blk_n <= output_s_full_n;
        else 
            output_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_s_din <= max_val_9_reg_502;

    output_s_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_grp1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_s_write <= ap_const_logic_1;
        else 
            output_s_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln155_2_fu_221_p3 <= 
        add_ln155_fu_183_p2 when (icmp_ln157_fu_189_p2(0) = '1') else 
        i_fu_70;
    select_ln155_fu_195_p3 <= 
        ap_const_lv3_0 when (icmp_ln157_fu_189_p2(0) = '1') else 
        j_fu_62;
    select_ln157_2_fu_319_p3 <= 
        ap_const_lv9_1 when (icmp_ln157_fu_189_p2(0) = '1') else 
        add_ln157_2_fu_313_p2;
    select_ln157_fu_249_p3 <= 
        add_ln157_fu_229_p2 when (and_ln155_fu_215_p2(0) = '1') else 
        select_ln155_fu_195_p3;
    tmp_4_fu_288_p6 <= ((((trunc_ln160_fu_265_p1 & empty_49_fu_257_p1) & ap_const_lv1_0) & empty_50_fu_261_p1) & ap_const_lv1_1);
    tmp_5_fu_347_p6 <= ((((trunc_ln160_reg_470 & empty_49_reg_458) & ap_const_lv1_1) & empty_50_reg_464) & ap_const_lv1_0);
    tmp_6_fu_363_p6 <= ((((trunc_ln160_reg_470 & empty_49_reg_458) & ap_const_lv1_1) & empty_50_reg_464) & ap_const_lv1_1);
    tmp_s_fu_269_p6 <= ((((trunc_ln160_fu_265_p1 & empty_49_fu_257_p1) & ap_const_lv1_0) & empty_50_fu_261_p1) & ap_const_lv1_0);
    trunc_ln160_fu_265_p1 <= c_mid2_fu_241_p3(5 - 1 downto 0);
    xor_ln155_fu_203_p2 <= (icmp_ln157_fu_189_p2 xor ap_const_lv1_1);
    zext_ln160_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_269_p6),32));
    zext_ln163_3_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_347_p6),32));
    zext_ln163_4_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_363_p6),32));
    zext_ln163_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_288_p6),32));
end behav;
