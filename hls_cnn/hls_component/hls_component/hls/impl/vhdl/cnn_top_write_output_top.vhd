-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_write_output_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    output_s_empty_n : IN STD_LOGIC;
    output_s_read : OUT STD_LOGIC;
    output_s_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    output_s_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem1_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_WREADY : IN STD_LOGIC;
    m_axi_gmem1_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem1_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RVALID : IN STD_LOGIC;
    m_axi_gmem1_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem1_0_RLAST : IN STD_LOGIC;
    m_axi_gmem1_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem1_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_BVALID : IN STD_LOGIC;
    m_axi_gmem1_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_top_write_output_top is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem1_blk_n_AW : STD_LOGIC;
    signal gmem1_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln_fu_69_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln_reg_90 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_start : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_done : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_idle : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_ready : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWVALID : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WVALID : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WLAST : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARVALID : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_RREADY : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_BREADY : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_output_s_read : STD_LOGIC;
    signal grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln192_fu_79_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_write_output_top_Pipeline_VITIS_LOOP_192_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_0_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_0_WREADY : IN STD_LOGIC;
        m_axi_gmem1_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem1_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_0_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_RVALID : IN STD_LOGIC;
        m_axi_gmem1_0_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem1_0_RLAST : IN STD_LOGIC;
        m_axi_gmem1_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_gmem1_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_BVALID : IN STD_LOGIC;
        m_axi_gmem1_0_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln192 : IN STD_LOGIC_VECTOR (30 downto 0);
        output_s_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        output_s_empty_n : IN STD_LOGIC;
        output_s_read : OUT STD_LOGIC;
        output_s_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
        output_s_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60 : component cnn_top_write_output_top_Pipeline_VITIS_LOOP_192_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_start,
        ap_done => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_done,
        ap_idle => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_idle,
        ap_ready => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_ready,
        m_axi_gmem1_0_AWVALID => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY => m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY => m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY => ap_const_logic_0,
        m_axi_gmem1_0_ARADDR => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID => ap_const_logic_0,
        m_axi_gmem1_0_RREADY => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA => ap_const_lv16_0,
        m_axi_gmem1_0_RLAST => ap_const_logic_0,
        m_axi_gmem1_0_RID => ap_const_lv1_0,
        m_axi_gmem1_0_RFIFONUM => ap_const_lv11_0,
        m_axi_gmem1_0_RUSER => ap_const_lv1_0,
        m_axi_gmem1_0_RRESP => ap_const_lv2_0,
        m_axi_gmem1_0_BVALID => m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP => m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID => m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER => m_axi_gmem1_0_BUSER,
        sext_ln192 => trunc_ln_reg_90,
        output_s_dout => output_s_dout,
        output_s_empty_n => output_s_empty_n,
        output_s_read => grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_output_s_read,
        output_s_num_data_valid => ap_const_lv10_0,
        output_s_fifo_cap => ap_const_lv10_0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_ready = ap_const_logic_1)) then 
                    grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln_reg_90 <= output_r(31 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem1_0_AWREADY, m_axi_gmem1_0_BVALID, ap_CS_fsm_state8, grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((m_axi_gmem1_0_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((m_axi_gmem1_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, m_axi_gmem1_0_AWREADY)
    begin
        if (((m_axi_gmem1_0_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_done)
    begin
        if ((grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(m_axi_gmem1_0_BVALID)
    begin
        if ((m_axi_gmem1_0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem1_0_BVALID, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((m_axi_gmem1_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem1_0_BVALID, ap_CS_fsm_state8)
    begin
        if (((m_axi_gmem1_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem1_blk_n_AW_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem1_0_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            gmem1_blk_n_AW <= m_axi_gmem1_0_AWREADY;
        else 
            gmem1_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem1_blk_n_B_assign_proc : process(m_axi_gmem1_0_BVALID, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            gmem1_blk_n_B <= m_axi_gmem1_0_BVALID;
        else 
            gmem1_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_start <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_ap_start_reg;
    m_axi_gmem1_0_ARADDR <= ap_const_lv32_0;
    m_axi_gmem1_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_0_ARID <= ap_const_lv1_0;
    m_axi_gmem1_0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_0_ARVALID <= ap_const_logic_0;

    m_axi_gmem1_0_AWADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem1_0_AWREADY, grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWADDR, ap_CS_fsm_state2, ap_CS_fsm_state3, sext_ln192_fu_79_p1)
    begin
        if ((not(((m_axi_gmem1_0_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem1_0_AWADDR <= sext_ln192_fu_79_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWADDR <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWADDR;
        else 
            m_axi_gmem1_0_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem1_0_AWBURST_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWBURST, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWBURST <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWBURST;
        else 
            m_axi_gmem1_0_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem1_0_AWCACHE_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWCACHE, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWCACHE <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWCACHE;
        else 
            m_axi_gmem1_0_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_0_AWID_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWID <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWID;
        else 
            m_axi_gmem1_0_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem1_0_AWLEN_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem1_0_AWREADY, grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWLEN, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((not(((m_axi_gmem1_0_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem1_0_AWLEN <= ap_const_lv32_200;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWLEN <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWLEN;
        else 
            m_axi_gmem1_0_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem1_0_AWLOCK_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWLOCK, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWLOCK <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWLOCK;
        else 
            m_axi_gmem1_0_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem1_0_AWPROT_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWPROT, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWPROT <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWPROT;
        else 
            m_axi_gmem1_0_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem1_0_AWQOS_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWQOS, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWQOS <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWQOS;
        else 
            m_axi_gmem1_0_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_0_AWREGION_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWREGION, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWREGION <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWREGION;
        else 
            m_axi_gmem1_0_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_0_AWSIZE_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWSIZE, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWSIZE <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWSIZE;
        else 
            m_axi_gmem1_0_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem1_0_AWUSER_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWUSER, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWUSER <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWUSER;
        else 
            m_axi_gmem1_0_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem1_0_AWVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_gmem1_0_AWREADY, grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if ((not(((m_axi_gmem1_0_AWREADY = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            m_axi_gmem1_0_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_AWVALID <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_AWVALID;
        else 
            m_axi_gmem1_0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem1_0_BREADY_assign_proc : process(m_axi_gmem1_0_BVALID, ap_CS_fsm_state8, grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((m_axi_gmem1_0_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            m_axi_gmem1_0_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_BREADY <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_BREADY;
        else 
            m_axi_gmem1_0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_0_RREADY <= ap_const_logic_0;
    m_axi_gmem1_0_WDATA <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WDATA;
    m_axi_gmem1_0_WID <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WID;
    m_axi_gmem1_0_WLAST <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WLAST;
    m_axi_gmem1_0_WSTRB <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WSTRB;
    m_axi_gmem1_0_WUSER <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WUSER;

    m_axi_gmem1_0_WVALID_assign_proc : process(grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_0_WVALID <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_m_axi_gmem1_0_WVALID;
        else 
            m_axi_gmem1_0_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    output_s_read <= grp_write_output_top_Pipeline_VITIS_LOOP_192_1_fu_60_output_s_read;
        sext_ln192_fu_79_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_69_p4),32));

    trunc_ln_fu_69_p4 <= output_r(31 downto 1);
end behav;
