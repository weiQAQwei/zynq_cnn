-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_top_read_input_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem0_0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_0_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem0_0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_0_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem0_0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
    m_axi_gmem0_0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r : IN STD_LOGIC_VECTOR (31 downto 0);
    input_s_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_s_full_n : IN STD_LOGIC;
    input_s_write : OUT STD_LOGIC;
    input_s_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    input_s_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0) );
end;


architecture behav of cnn_top_read_input_top is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln184_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_grp1 : BOOLEAN;
    signal first_iter_0_reg_93 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_blk_n_R : STD_LOGIC;
    signal input_s_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_grp3 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_read_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_io_grp1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_grp1 : BOOLEAN;
    signal icmp_ln184_reg_169 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal icmp_ln184_reg_169_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_addr_read_reg_173 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sext_ln184_fu_120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_fu_64 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal i_fu_134_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage2_01001_grp3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_grp3 : BOOLEAN;
    signal trunc_ln_fu_111_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage2 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_314 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_top_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component cnn_top_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    first_iter_0_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_314)) then 
                    first_iter_0_reg_93 <= ap_const_lv1_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    first_iter_0_reg_93 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    i1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i1_fu_64 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                i1_fu_64 <= i_fu_134_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                gmem0_addr_read_reg_173 <= m_axi_gmem0_0_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln184_reg_169 <= icmp_ln184_fu_140_p2;
                icmp_ln184_reg_169_pp0_iter1_reg <= icmp_ln184_reg_169;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_read_reg_158 <= input_r;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter2_stage2, ap_idle_pp0_0to1, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_pp0_stage1_11001_grp1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0_reg, m_axi_gmem0_0_RVALID, ap_block_state2_io_grp1)
    begin
                ap_block_pp0_stage1_11001_grp1 <= (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io_grp1)) or ((m_axi_gmem0_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1_grp1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0_reg, m_axi_gmem0_0_RVALID, ap_block_state2_io_grp1)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io_grp1)) or ((m_axi_gmem0_0_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage2_01001_grp3_assign_proc : process(ap_enable_reg_pp0_iter2, input_s_full_n)
    begin
                ap_block_pp0_stage2_01001_grp3 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (input_s_full_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage2_11001_grp3_assign_proc : process(ap_enable_reg_pp0_iter2, input_s_full_n)
    begin
                ap_block_pp0_stage2_11001_grp3 <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (input_s_full_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage2_grp3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, input_s_full_n)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (input_s_full_n = ap_const_logic_0));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage3_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage3_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_io_grp1_assign_proc : process(m_axi_gmem0_0_ARREADY, first_iter_0_reg_93)
    begin
                ap_block_state2_io_grp1 <= ((m_axi_gmem0_0_ARREADY = ap_const_logic_0) and (first_iter_0_reg_93 = ap_const_lv1_1));
    end process;


    ap_condition_314_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln184_reg_169)
    begin
                ap_condition_314 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln184_reg_169 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln184_fu_140_p2)
    begin
        if (((icmp_ln184_fu_140_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, icmp_ln184_reg_169_pp0_iter1_reg, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln184_reg_169_pp0_iter1_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_done_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0_reg, m_axi_gmem0_0_ARREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_grp1, first_iter_0_reg_93)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (first_iter_0_reg_93 = ap_const_lv1_1))) then 
            gmem0_blk_n_AR <= m_axi_gmem0_0_ARREADY;
        else 
            gmem0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_gmem0_0_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            gmem0_blk_n_R <= m_axi_gmem0_0_RVALID;
        else 
            gmem0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    i_fu_134_p2 <= std_logic_vector(unsigned(i1_fu_64) + unsigned(ap_const_lv8_1));
    icmp_ln184_fu_140_p2 <= "1" when (i1_fu_64 = ap_const_lv8_FF) else "0";

    input_s_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, input_s_full_n, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_grp3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_grp3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_s_blk_n <= input_s_full_n;
        else 
            input_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_s_din <= gmem0_addr_read_reg_173;

    input_s_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001_grp3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001_grp3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_s_write <= ap_const_logic_1;
        else 
            input_s_write <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_0_ARADDR <= sext_ln184_fu_120_p1;
    m_axi_gmem0_0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_0_ARLEN <= ap_const_lv32_100;
    m_axi_gmem0_0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_ARUSER <= ap_const_lv1_0;

    m_axi_gmem0_0_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, first_iter_0_reg_93, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (first_iter_0_reg_93 = ap_const_lv1_1))) then 
            m_axi_gmem0_0_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_0_AWADDR <= ap_const_lv32_0;
    m_axi_gmem0_0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_0_BREADY <= ap_const_logic_0;

    m_axi_gmem0_0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001_grp1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001_grp1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_gmem0_0_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_0_WDATA <= ap_const_lv16_0;
    m_axi_gmem0_0_WID <= ap_const_lv1_0;
    m_axi_gmem0_0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_0_WSTRB <= ap_const_lv2_0;
    m_axi_gmem0_0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_0_WVALID <= ap_const_logic_0;
        sext_ln184_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_111_p4),32));

    trunc_ln_fu_111_p4 <= input_read_reg_158(31 downto 1);
end behav;
