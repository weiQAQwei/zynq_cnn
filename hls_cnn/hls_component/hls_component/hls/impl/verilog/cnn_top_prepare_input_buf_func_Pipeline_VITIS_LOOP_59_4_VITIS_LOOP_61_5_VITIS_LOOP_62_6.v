// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_top_prepare_input_buf_func_Pipeline_VITIS_LOOP_59_4_VITIS_LOOP_61_5_VITIS_LOOP_62_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pool1_out_dout,
        pool1_out_empty_n,
        pool1_out_read,
        pool1_out_num_data_valid,
        pool1_out_fifo_cap,
        input_buf_address0,
        input_buf_ce0,
        input_buf_we0,
        input_buf_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] pool1_out_dout;
input   pool1_out_empty_n;
output   pool1_out_read;
input  [11:0] pool1_out_num_data_valid;
input  [11:0] pool1_out_fifo_cap;
output  [11:0] input_buf_address0;
output   input_buf_ce0;
output   input_buf_we0;
output  [15:0] input_buf_d0;

reg ap_idle;
reg pool1_out_read;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln59_fu_134_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
reg    ap_block_state3_pp0_stage2_iter0;
reg    pool1_out_blk_n;
wire   [3:0] select_ln61_1_fu_263_p3;
reg   [3:0] select_ln61_1_reg_437;
wire    ap_CS_fsm_state2;
wire   [8:0] add_ln64_fu_315_p2;
reg   [8:0] add_ln64_reg_442;
wire   [31:0] zext_ln64_4_fu_394_p1;
reg   [5:0] ic_fu_66;
wire   [5:0] add_ln62_fu_321_p2;
wire    ap_loop_init;
reg   [3:0] j_fu_70;
wire   [3:0] select_ln61_2_fu_271_p3;
reg   [9:0] indvar_flatten19_fu_74;
wire   [9:0] select_ln61_3_fu_333_p3;
reg   [3:0] i_fu_78;
wire   [3:0] select_ln59_3_fu_229_p3;
reg   [11:0] indvar_flatten33_fu_82;
wire   [11:0] add_ln59_fu_140_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten33_load;
reg    input_buf_we0_local;
reg    input_buf_ce0_local;
wire   [0:0] icmp_ln61_fu_163_p2;
wire   [3:0] p_mid1_fu_177_p2;
wire   [3:0] empty_fu_183_p2;
wire   [3:0] indvars_iv_next223_fu_197_p2;
wire   [0:0] icmp_ln62_fu_217_p2;
wire   [0:0] xor_ln59_fu_211_p2;
wire   [3:0] select_ln59_fu_169_p3;
wire   [0:0] and_ln59_fu_223_p2;
wire   [0:0] or_ln61_fu_243_p2;
wire   [3:0] indvars_iv_next2_mid1_fu_257_p2;
wire   [3:0] select_ln59_2_fu_203_p3;
wire   [3:0] indvars_iv_next2_dup_fu_237_p2;
wire   [3:0] select_ln59_1_fu_189_p3;
wire   [5:0] select_ln61_fu_249_p3;
wire   [4:0] trunc_ln64_fu_283_p1;
wire   [7:0] tmp_fu_287_p3;
wire   [5:0] shl_ln64_fu_299_p2;
wire   [8:0] zext_ln64_1_fu_295_p1;
wire   [8:0] zext_ln64_2_fu_305_p1;
wire   [8:0] add_ln64_1_fu_309_p2;
wire   [8:0] zext_ln64_fu_279_p1;
wire   [9:0] add_ln61_fu_327_p2;
wire   [9:0] tmp_2_fu_371_p3;
wire   [11:0] tmp_1_fu_364_p3;
wire   [11:0] zext_ln64_3_fu_378_p1;
wire   [11:0] add_ln64_3_fu_382_p2;
wire   [11:0] zext_ln63_fu_361_p1;
wire   [11:0] add_ln64_2_fu_388_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ic_fu_66 = 6'd0;
#0 j_fu_70 = 4'd0;
#0 indvar_flatten19_fu_74 = 10'd0;
#0 i_fu_78 = 4'd0;
#0 indvar_flatten33_fu_82 = 12'd0;
#0 ap_done_reg = 1'b0;
end

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_78 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_fu_78 <= select_ln59_3_fu_229_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ic_fu_66 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ic_fu_66 <= add_ln62_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten19_fu_74 <= 10'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten19_fu_74 <= select_ln61_3_fu_333_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln59_fu_134_p2 == 1'd0)) begin
            indvar_flatten33_fu_82 <= add_ln59_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten33_fu_82 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_70 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        j_fu_70 <= select_ln61_2_fu_271_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln64_reg_442 <= add_ln64_fu_315_p2;
        select_ln61_1_reg_437 <= select_ln61_1_fu_263_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_pp0_stage2_iter0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln59_fu_134_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_pp0_stage2_iter0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten33_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten33_load = indvar_flatten33_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_pp0_stage2_iter0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_buf_ce0_local = 1'b1;
    end else begin
        input_buf_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_pp0_stage2_iter0) & (1'b1 == ap_CS_fsm_state3))) begin
        input_buf_we0_local = 1'b1;
    end else begin
        input_buf_we0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        pool1_out_blk_n = pool1_out_empty_n;
    end else begin
        pool1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_pp0_stage2_iter0) & (1'b1 == ap_CS_fsm_state3))) begin
        pool1_out_read = 1'b1;
    end else begin
        pool1_out_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln59_fu_134_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_pp0_stage2_iter0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln59_fu_140_p2 = (ap_sig_allocacmp_indvar_flatten33_load + 12'd1);

assign add_ln61_fu_327_p2 = (indvar_flatten19_fu_74 + 10'd1);

assign add_ln62_fu_321_p2 = (select_ln61_fu_249_p3 + 6'd1);

assign add_ln64_1_fu_309_p2 = (zext_ln64_1_fu_295_p1 + zext_ln64_2_fu_305_p1);

assign add_ln64_2_fu_388_p2 = (add_ln64_3_fu_382_p2 + zext_ln63_fu_361_p1);

assign add_ln64_3_fu_382_p2 = (tmp_1_fu_364_p3 + zext_ln64_3_fu_378_p1);

assign add_ln64_fu_315_p2 = (add_ln64_1_fu_309_p2 + zext_ln64_fu_279_p1);

assign and_ln59_fu_223_p2 = (xor_ln59_fu_211_p2 & icmp_ln62_fu_217_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (pool1_out_empty_n == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_fu_183_p2 = (i_fu_78 + 4'd1);

assign icmp_ln59_fu_134_p2 = ((ap_sig_allocacmp_indvar_flatten33_load == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_163_p2 = ((indvar_flatten19_fu_74 == 10'd256) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_217_p2 = ((ic_fu_66 == 6'd32) ? 1'b1 : 1'b0);

assign indvars_iv_next223_fu_197_p2 = (j_fu_70 + 4'd1);

assign indvars_iv_next2_dup_fu_237_p2 = (select_ln59_fu_169_p3 + 4'd1);

assign indvars_iv_next2_mid1_fu_257_p2 = (select_ln59_fu_169_p3 + 4'd2);

assign input_buf_address0 = zext_ln64_4_fu_394_p1;

assign input_buf_ce0 = input_buf_ce0_local;

assign input_buf_d0 = pool1_out_dout;

assign input_buf_we0 = input_buf_we0_local;

assign or_ln61_fu_243_p2 = (icmp_ln61_fu_163_p2 | and_ln59_fu_223_p2);

assign p_mid1_fu_177_p2 = (i_fu_78 + 4'd2);

assign select_ln59_1_fu_189_p3 = ((icmp_ln61_fu_163_p2[0:0] == 1'b1) ? p_mid1_fu_177_p2 : empty_fu_183_p2);

assign select_ln59_2_fu_203_p3 = ((icmp_ln61_fu_163_p2[0:0] == 1'b1) ? 4'd1 : indvars_iv_next223_fu_197_p2);

assign select_ln59_3_fu_229_p3 = ((icmp_ln61_fu_163_p2[0:0] == 1'b1) ? empty_fu_183_p2 : i_fu_78);

assign select_ln59_fu_169_p3 = ((icmp_ln61_fu_163_p2[0:0] == 1'b1) ? 4'd0 : j_fu_70);

assign select_ln61_1_fu_263_p3 = ((and_ln59_fu_223_p2[0:0] == 1'b1) ? indvars_iv_next2_mid1_fu_257_p2 : select_ln59_2_fu_203_p3);

assign select_ln61_2_fu_271_p3 = ((and_ln59_fu_223_p2[0:0] == 1'b1) ? indvars_iv_next2_dup_fu_237_p2 : select_ln59_fu_169_p3);

assign select_ln61_3_fu_333_p3 = ((icmp_ln61_fu_163_p2[0:0] == 1'b1) ? 10'd1 : add_ln61_fu_327_p2);

assign select_ln61_fu_249_p3 = ((or_ln61_fu_243_p2[0:0] == 1'b1) ? 6'd0 : ic_fu_66);

assign shl_ln64_fu_299_p2 = select_ln61_fu_249_p3 << 6'd1;

assign tmp_1_fu_364_p3 = {{add_ln64_reg_442}, {3'd0}};

assign tmp_2_fu_371_p3 = {{add_ln64_reg_442}, {1'd0}};

assign tmp_fu_287_p3 = {{trunc_ln64_fu_283_p1}, {3'd0}};

assign trunc_ln64_fu_283_p1 = select_ln61_fu_249_p3[4:0];

assign xor_ln59_fu_211_p2 = (icmp_ln61_fu_163_p2 ^ 1'd1);

assign zext_ln63_fu_361_p1 = select_ln61_1_reg_437;

assign zext_ln64_1_fu_295_p1 = tmp_fu_287_p3;

assign zext_ln64_2_fu_305_p1 = shl_ln64_fu_299_p2;

assign zext_ln64_3_fu_378_p1 = tmp_2_fu_371_p3;

assign zext_ln64_4_fu_394_p1 = add_ln64_2_fu_388_p2;

assign zext_ln64_fu_279_p1 = select_ln59_1_fu_189_p3;

endmodule //cnn_top_prepare_input_buf_func_Pipeline_VITIS_LOOP_59_4_VITIS_LOOP_61_5_VITIS_LOOP_62_6
