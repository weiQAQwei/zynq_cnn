// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_top_pooling_func_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        pool1_out_din,
        pool1_out_full_n,
        pool1_out_write,
        pool1_out_num_data_valid,
        pool1_out_fifo_cap,
        input_buf_address0,
        input_buf_ce0,
        input_buf_q0,
        input_buf_address1,
        input_buf_ce1,
        input_buf_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] pool1_out_din;
input   pool1_out_full_n;
output   pool1_out_write;
input  [31:0] pool1_out_num_data_valid;
input  [31:0] pool1_out_fifo_cap;
output  [12:0] input_buf_address0;
output   input_buf_ce0;
input  [15:0] input_buf_q0;
output  [12:0] input_buf_address1;
output   input_buf_ce1;
input  [15:0] input_buf_q1;

reg ap_idle;
reg pool1_out_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln155_fu_154_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg    pool1_out_blk_n;
wire    ap_block_pp0_stage0_grp1;
reg   [0:0] icmp_ln155_reg_454;
reg    ap_block_pp0_stage0_11001;
wire   [2:0] empty_47_fu_257_p1;
reg   [2:0] empty_47_reg_458;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire   [2:0] empty_48_fu_261_p1;
reg   [2:0] empty_48_reg_464;
wire   [4:0] trunc_ln160_fu_265_p1;
reg   [4:0] trunc_ln160_reg_470;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
wire   [15:0] max_val_fu_385_p3;
reg   [15:0] max_val_reg_496;
wire   [15:0] max_val_4_fu_411_p3;
reg   [15:0] max_val_4_reg_502;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] zext_ln160_fu_283_p1;
wire    ap_block_pp0_stage1;
wire   [31:0] zext_ln163_fu_302_p1;
wire   [31:0] zext_ln163_1_fu_358_p1;
wire    ap_block_pp0_stage2;
wire   [31:0] zext_ln163_2_fu_374_p1;
reg   [5:0] c_fu_58;
wire   [5:0] add_ln158_fu_307_p2;
wire    ap_loop_init;
wire    ap_block_pp0_stage0_11001_grp0;
reg    ap_block_pp0_stage0_subdone_grp0_done_reg;
wire    ap_block_pp0_stage0_subdone_grp0;
reg   [3:0] j_fu_62;
wire   [3:0] select_ln157_fu_249_p3;
reg   [9:0] indvar_flatten_fu_66;
wire   [9:0] select_ln157_1_fu_319_p3;
reg   [3:0] i_fu_70;
wire   [3:0] select_ln155_1_fu_221_p3;
reg   [11:0] indvar_flatten12_fu_74;
wire   [11:0] add_ln155_1_fu_160_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten12_load;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001_grp1;
reg    ap_block_pp0_stage0_11001_grp1;
reg    input_buf_ce1_local;
reg   [12:0] input_buf_address1_local;
reg    input_buf_ce0_local;
reg   [12:0] input_buf_address0_local;
wire   [0:0] icmp_ln157_fu_189_p2;
wire   [0:0] icmp_ln158_fu_209_p2;
wire   [0:0] xor_ln155_fu_203_p2;
wire   [3:0] add_ln155_fu_183_p2;
wire   [3:0] select_ln155_fu_195_p3;
wire   [0:0] and_ln155_fu_215_p2;
wire   [0:0] empty_fu_235_p2;
wire   [3:0] add_ln157_fu_229_p2;
wire   [5:0] c_mid2_fu_241_p3;
wire   [12:0] tmp_s_fu_269_p6;
wire   [12:0] tmp_1_fu_288_p6;
wire   [9:0] add_ln157_1_fu_313_p2;
wire   [12:0] tmp_2_fu_347_p6;
wire   [12:0] tmp_3_fu_363_p6;
wire   [0:0] icmp_ln164_fu_379_p2;
wire    ap_block_pp0_stage3;
wire   [0:0] icmp_ln164_1_fu_393_p2;
wire   [15:0] max_val_3_fu_398_p3;
wire   [0:0] icmp_ln164_2_fu_405_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 c_fu_58 = 6'd0;
#0 ap_block_pp0_stage0_subdone_grp0_done_reg = 1'b0;
#0 j_fu_62 = 4'd0;
#0 indvar_flatten_fu_66 = 10'd0;
#0 i_fu_70 = 4'd0;
#0 indvar_flatten12_fu_74 = 12'd0;
#0 ap_done_reg = 1'b0;
end

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_subdone_grp0)) begin
                ap_block_pp0_stage0_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        c_fu_58 <= 6'd0;
    end else if (((icmp_ln155_reg_454 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_fu_58 <= add_ln158_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_70 <= 4'd0;
    end else if (((icmp_ln155_reg_454 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_70 <= select_ln155_1_fu_221_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln155_fu_154_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten12_fu_74 <= add_ln155_1_fu_160_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_74 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten_fu_66 <= 10'd0;
    end else if (((icmp_ln155_reg_454 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten_fu_66 <= select_ln157_1_fu_319_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage0_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        j_fu_62 <= 4'd0;
    end else if (((icmp_ln155_reg_454 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        j_fu_62 <= select_ln157_fu_249_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_47_reg_458 <= empty_47_fu_257_p1;
        empty_48_reg_464 <= empty_48_fu_261_p1;
        trunc_ln160_reg_470 <= trunc_ln160_fu_265_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln155_reg_454 <= icmp_ln155_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        max_val_4_reg_502 <= max_val_4_fu_411_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        max_val_reg_496 <= max_val_fu_385_p3;
    end
end

always @ (*) begin
    if (((icmp_ln155_fu_154_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_74;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0_reg == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_buf_address0_local = zext_ln163_2_fu_374_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_buf_address0_local = zext_ln163_fu_302_p1;
        end else begin
            input_buf_address0_local = 'bx;
        end
    end else begin
        input_buf_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0_reg == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_buf_address1_local = zext_ln163_1_fu_358_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_buf_address1_local = zext_ln160_fu_283_p1;
        end else begin
            input_buf_address1_local = 'bx;
        end
    end else begin
        input_buf_address1_local = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_buf_ce0_local = 1'b1;
    end else begin
        input_buf_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_buf_ce1_local = 1'b1;
    end else begin
        input_buf_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool1_out_blk_n = pool1_out_full_n;
    end else begin
        pool1_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001_grp1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pool1_out_write = 1'b1;
    end else begin
        pool1_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln155_1_fu_160_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 12'd1);

assign add_ln155_fu_183_p2 = (i_fu_70 + 4'd1);

assign add_ln157_1_fu_313_p2 = (indvar_flatten_fu_66 + 10'd1);

assign add_ln157_fu_229_p2 = (select_ln155_fu_195_p3 + 4'd1);

assign add_ln158_fu_307_p2 = (c_mid2_fu_241_p3 + 6'd1);

assign and_ln155_fu_215_p2 = (xor_ln155_fu_203_p2 & icmp_ln158_fu_209_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001_grp1 = ((pool1_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((pool1_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001_grp1 = ((pool1_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((pool1_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage0_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign c_mid2_fu_241_p3 = ((empty_fu_235_p2[0:0] == 1'b1) ? 6'd0 : c_fu_58);

assign empty_47_fu_257_p1 = select_ln155_1_fu_221_p3[2:0];

assign empty_48_fu_261_p1 = select_ln157_fu_249_p3[2:0];

assign empty_fu_235_p2 = (icmp_ln157_fu_189_p2 | and_ln155_fu_215_p2);

assign icmp_ln155_fu_154_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 12'd2048) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_189_p2 = ((indvar_flatten_fu_66 == 10'd256) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_209_p2 = ((c_fu_58 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln164_1_fu_393_p2 = (($signed(input_buf_q1) > $signed(max_val_reg_496)) ? 1'b1 : 1'b0);

assign icmp_ln164_2_fu_405_p2 = (($signed(input_buf_q0) > $signed(max_val_3_fu_398_p3)) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_379_p2 = (($signed(input_buf_q0) > $signed(input_buf_q1)) ? 1'b1 : 1'b0);

assign input_buf_address0 = input_buf_address0_local;

assign input_buf_address1 = input_buf_address1_local;

assign input_buf_ce0 = input_buf_ce0_local;

assign input_buf_ce1 = input_buf_ce1_local;

assign max_val_3_fu_398_p3 = ((icmp_ln164_1_fu_393_p2[0:0] == 1'b1) ? input_buf_q1 : max_val_reg_496);

assign max_val_4_fu_411_p3 = ((icmp_ln164_2_fu_405_p2[0:0] == 1'b1) ? input_buf_q0 : max_val_3_fu_398_p3);

assign max_val_fu_385_p3 = ((icmp_ln164_fu_379_p2[0:0] == 1'b1) ? input_buf_q0 : input_buf_q1);

assign pool1_out_din = max_val_4_reg_502;

assign select_ln155_1_fu_221_p3 = ((icmp_ln157_fu_189_p2[0:0] == 1'b1) ? add_ln155_fu_183_p2 : i_fu_70);

assign select_ln155_fu_195_p3 = ((icmp_ln157_fu_189_p2[0:0] == 1'b1) ? 4'd0 : j_fu_62);

assign select_ln157_1_fu_319_p3 = ((icmp_ln157_fu_189_p2[0:0] == 1'b1) ? 10'd1 : add_ln157_1_fu_313_p2);

assign select_ln157_fu_249_p3 = ((and_ln155_fu_215_p2[0:0] == 1'b1) ? add_ln157_fu_229_p2 : select_ln155_fu_195_p3);

assign tmp_1_fu_288_p6 = {{{{{trunc_ln160_fu_265_p1}, {empty_47_fu_257_p1}}, {1'd0}}, {empty_48_fu_261_p1}}, {1'd1}};

assign tmp_2_fu_347_p6 = {{{{{trunc_ln160_reg_470}, {empty_47_reg_458}}, {1'd1}}, {empty_48_reg_464}}, {1'd0}};

assign tmp_3_fu_363_p6 = {{{{{trunc_ln160_reg_470}, {empty_47_reg_458}}, {1'd1}}, {empty_48_reg_464}}, {1'd1}};

assign tmp_s_fu_269_p6 = {{{{{trunc_ln160_fu_265_p1}, {empty_47_fu_257_p1}}, {1'd0}}, {empty_48_fu_261_p1}}, {1'd0}};

assign trunc_ln160_fu_265_p1 = c_mid2_fu_241_p3[4:0];

assign xor_ln155_fu_203_p2 = (icmp_ln157_fu_189_p2 ^ 1'd1);

assign zext_ln160_fu_283_p1 = tmp_s_fu_269_p6;

assign zext_ln163_1_fu_358_p1 = tmp_2_fu_347_p6;

assign zext_ln163_2_fu_374_p1 = tmp_3_fu_363_p6;

assign zext_ln163_fu_302_p1 = tmp_1_fu_288_p6;

endmodule //cnn_top_pooling_func_1
