// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_top_load_params_func_1_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_VITIS_LOOP_30_3_VITI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem4_0_AWVALID,
        m_axi_gmem4_0_AWREADY,
        m_axi_gmem4_0_AWADDR,
        m_axi_gmem4_0_AWID,
        m_axi_gmem4_0_AWLEN,
        m_axi_gmem4_0_AWSIZE,
        m_axi_gmem4_0_AWBURST,
        m_axi_gmem4_0_AWLOCK,
        m_axi_gmem4_0_AWCACHE,
        m_axi_gmem4_0_AWPROT,
        m_axi_gmem4_0_AWQOS,
        m_axi_gmem4_0_AWREGION,
        m_axi_gmem4_0_AWUSER,
        m_axi_gmem4_0_WVALID,
        m_axi_gmem4_0_WREADY,
        m_axi_gmem4_0_WDATA,
        m_axi_gmem4_0_WSTRB,
        m_axi_gmem4_0_WLAST,
        m_axi_gmem4_0_WID,
        m_axi_gmem4_0_WUSER,
        m_axi_gmem4_0_ARVALID,
        m_axi_gmem4_0_ARREADY,
        m_axi_gmem4_0_ARADDR,
        m_axi_gmem4_0_ARID,
        m_axi_gmem4_0_ARLEN,
        m_axi_gmem4_0_ARSIZE,
        m_axi_gmem4_0_ARBURST,
        m_axi_gmem4_0_ARLOCK,
        m_axi_gmem4_0_ARCACHE,
        m_axi_gmem4_0_ARPROT,
        m_axi_gmem4_0_ARQOS,
        m_axi_gmem4_0_ARREGION,
        m_axi_gmem4_0_ARUSER,
        m_axi_gmem4_0_RVALID,
        m_axi_gmem4_0_RREADY,
        m_axi_gmem4_0_RDATA,
        m_axi_gmem4_0_RLAST,
        m_axi_gmem4_0_RID,
        m_axi_gmem4_0_RFIFONUM,
        m_axi_gmem4_0_RUSER,
        m_axi_gmem4_0_RRESP,
        m_axi_gmem4_0_BVALID,
        m_axi_gmem4_0_BREADY,
        m_axi_gmem4_0_BRESP,
        m_axi_gmem4_0_BID,
        m_axi_gmem4_0_BUSER,
        sext_ln26,
        local_weights_address0,
        local_weights_ce0,
        local_weights_we0,
        local_weights_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem4_0_AWVALID;
input   m_axi_gmem4_0_AWREADY;
output  [31:0] m_axi_gmem4_0_AWADDR;
output  [0:0] m_axi_gmem4_0_AWID;
output  [31:0] m_axi_gmem4_0_AWLEN;
output  [2:0] m_axi_gmem4_0_AWSIZE;
output  [1:0] m_axi_gmem4_0_AWBURST;
output  [1:0] m_axi_gmem4_0_AWLOCK;
output  [3:0] m_axi_gmem4_0_AWCACHE;
output  [2:0] m_axi_gmem4_0_AWPROT;
output  [3:0] m_axi_gmem4_0_AWQOS;
output  [3:0] m_axi_gmem4_0_AWREGION;
output  [0:0] m_axi_gmem4_0_AWUSER;
output   m_axi_gmem4_0_WVALID;
input   m_axi_gmem4_0_WREADY;
output  [15:0] m_axi_gmem4_0_WDATA;
output  [1:0] m_axi_gmem4_0_WSTRB;
output   m_axi_gmem4_0_WLAST;
output  [0:0] m_axi_gmem4_0_WID;
output  [0:0] m_axi_gmem4_0_WUSER;
output   m_axi_gmem4_0_ARVALID;
input   m_axi_gmem4_0_ARREADY;
output  [31:0] m_axi_gmem4_0_ARADDR;
output  [0:0] m_axi_gmem4_0_ARID;
output  [31:0] m_axi_gmem4_0_ARLEN;
output  [2:0] m_axi_gmem4_0_ARSIZE;
output  [1:0] m_axi_gmem4_0_ARBURST;
output  [1:0] m_axi_gmem4_0_ARLOCK;
output  [3:0] m_axi_gmem4_0_ARCACHE;
output  [2:0] m_axi_gmem4_0_ARPROT;
output  [3:0] m_axi_gmem4_0_ARQOS;
output  [3:0] m_axi_gmem4_0_ARREGION;
output  [0:0] m_axi_gmem4_0_ARUSER;
input   m_axi_gmem4_0_RVALID;
output   m_axi_gmem4_0_RREADY;
input  [15:0] m_axi_gmem4_0_RDATA;
input   m_axi_gmem4_0_RLAST;
input  [0:0] m_axi_gmem4_0_RID;
input  [10:0] m_axi_gmem4_0_RFIFONUM;
input  [0:0] m_axi_gmem4_0_RUSER;
input  [1:0] m_axi_gmem4_0_RRESP;
input   m_axi_gmem4_0_BVALID;
output   m_axi_gmem4_0_BREADY;
input  [1:0] m_axi_gmem4_0_BRESP;
input  [0:0] m_axi_gmem4_0_BID;
input  [0:0] m_axi_gmem4_0_BUSER;
input  [30:0] sext_ln26;
output  [13:0] local_weights_address0;
output   local_weights_ce0;
output   local_weights_we0;
output  [15:0] local_weights_d0;

reg ap_idle;
reg m_axi_gmem4_0_RREADY;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln26_fu_172_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
reg    gmem4_blk_n_R;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln28_fu_196_p2;
reg   [0:0] icmp_ln28_reg_539;
wire   [0:0] xor_ln26_fu_202_p2;
reg   [0:0] xor_ln26_reg_547;
wire   [0:0] icmp_ln30_fu_208_p2;
reg   [0:0] icmp_ln30_reg_552;
wire   [0:0] and_ln26_1_fu_214_p2;
reg   [0:0] and_ln26_1_reg_557;
wire   [0:0] empty_fu_220_p2;
reg   [0:0] empty_reg_563;
wire   [1:0] n_mid2_fu_364_p3;
reg   [1:0] n_mid2_reg_568;
reg    ap_block_state2_pp0_stage1_iter0;
wire   [11:0] add_ln34_fu_420_p2;
reg   [11:0] add_ln34_reg_573;
reg   [15:0] gmem4_addr_read_reg_579;
wire   [31:0] zext_ln34_8_fu_477_p1;
reg   [1:0] n_fu_78;
wire   [1:0] add_ln31_fu_426_p2;
wire    ap_loop_init;
reg   [1:0] m_fu_82;
wire   [1:0] select_ln30_fu_372_p3;
reg   [3:0] indvar_flatten_fu_86;
wire   [3:0] select_ln30_2_fu_232_p3;
reg   [3:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [5:0] ic_fu_90;
wire   [5:0] select_ln28_fu_341_p3;
reg   [9:0] indvar_flatten12_fu_94;
wire   [9:0] select_ln28_1_fu_246_p3;
reg   [9:0] ap_sig_allocacmp_indvar_flatten12_load;
reg   [5:0] oc_fu_98;
wire   [5:0] select_ln26_2_fu_300_p3;
reg   [13:0] indvar_flatten35_fu_102;
wire   [13:0] add_ln26_2_fu_178_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten35_load;
reg    local_weights_we0_local;
reg    local_weights_ce0_local;
wire   [3:0] add_ln30_2_fu_226_p2;
wire   [9:0] add_ln28_1_fu_240_p2;
wire   [5:0] add_ln26_fu_281_p2;
wire   [5:0] select_ln26_fu_287_p3;
wire   [0:0] exitcond_flatten_not_fu_320_p2;
wire   [0:0] not_exitcond_flatten_mid234_fu_325_p2;
wire   [0:0] and_ln26_fu_330_p2;
wire   [0:0] icmp_ln31_fu_294_p2;
wire   [5:0] add_ln28_fu_307_p2;
wire   [1:0] m_mid26_fu_313_p3;
wire   [0:0] icmp_ln31_mid211_fu_335_p2;
wire   [0:0] empty_56_fu_354_p2;
wire   [0:0] empty_57_fu_359_p2;
wire   [1:0] add_ln30_fu_348_p2;
wire   [4:0] trunc_ln34_fu_380_p1;
wire   [4:0] trunc_ln34_2_fu_384_p1;
wire   [9:0] tmp_s_fu_388_p3;
wire   [11:0] p_shl2_fu_400_p4;
wire   [11:0] zext_ln34_fu_396_p1;
wire   [11:0] sub_ln34_fu_410_p2;
wire   [11:0] zext_ln34_5_fu_416_p1;
wire   [13:0] p_shl_fu_455_p3;
wire   [13:0] zext_ln34_6_fu_452_p1;
wire   [13:0] sub_ln34_2_fu_462_p2;
wire   [13:0] zext_ln34_7_fu_468_p1;
wire   [13:0] add_ln34_1_fu_471_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 n_fu_78 = 2'd0;
#0 m_fu_82 = 2'd0;
#0 indvar_flatten_fu_86 = 4'd0;
#0 ic_fu_90 = 6'd0;
#0 indvar_flatten12_fu_94 = 10'd0;
#0 oc_fu_98 = 6'd0;
#0 indvar_flatten35_fu_102 = 14'd0;
#0 ap_done_reg = 1'b0;
end

cnn_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ic_fu_90 <= 6'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage1_iter0) & (1'b1 == ap_CS_fsm_state2))) begin
        ic_fu_90 <= select_ln28_fu_341_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln26_fu_172_p2 == 1'd0)) begin
            indvar_flatten12_fu_94 <= select_ln28_1_fu_246_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_94 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln26_fu_172_p2 == 1'd0)) begin
            indvar_flatten35_fu_102 <= add_ln26_2_fu_178_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten35_fu_102 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln26_fu_172_p2 == 1'd0)) begin
            indvar_flatten_fu_86 <= select_ln30_2_fu_232_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_86 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        m_fu_82 <= 2'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage1_iter0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_fu_82 <= select_ln30_fu_372_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        n_fu_78 <= 2'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage1_iter0) & (1'b1 == ap_CS_fsm_state2))) begin
        n_fu_78 <= add_ln31_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        oc_fu_98 <= 6'd0;
    end else if (((1'b0 == ap_block_state2_pp0_stage1_iter0) & (1'b1 == ap_CS_fsm_state2))) begin
        oc_fu_98 <= select_ln26_2_fu_300_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_pp0_stage1_iter0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln34_reg_573 <= add_ln34_fu_420_p2;
        gmem4_addr_read_reg_579 <= m_axi_gmem4_0_RDATA;
        n_mid2_reg_568 <= n_mid2_fu_364_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        and_ln26_1_reg_557 <= and_ln26_1_fu_214_p2;
        empty_reg_563 <= empty_fu_220_p2;
        icmp_ln28_reg_539 <= icmp_ln28_fu_196_p2;
        icmp_ln30_reg_552 <= icmp_ln30_fu_208_p2;
        xor_ln26_reg_547 <= xor_ln26_fu_202_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_pp0_stage1_iter0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln26_fu_172_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten12_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten12_load = indvar_flatten12_fu_94;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten35_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten35_load = indvar_flatten35_fu_102;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 4'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_86;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem4_blk_n_R = m_axi_gmem4_0_RVALID;
    end else begin
        gmem4_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        local_weights_ce0_local = 1'b1;
    end else begin
        local_weights_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        local_weights_we0_local = 1'b1;
    end else begin
        local_weights_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_pp0_stage1_iter0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem4_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem4_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln26_fu_172_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_pp0_stage1_iter0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_2_fu_178_p2 = (ap_sig_allocacmp_indvar_flatten35_load + 14'd1);

assign add_ln26_fu_281_p2 = (oc_fu_98 + 6'd1);

assign add_ln28_1_fu_240_p2 = (ap_sig_allocacmp_indvar_flatten12_load + 10'd1);

assign add_ln28_fu_307_p2 = (select_ln26_fu_287_p3 + 6'd1);

assign add_ln30_2_fu_226_p2 = (ap_sig_allocacmp_indvar_flatten_load + 4'd1);

assign add_ln30_fu_348_p2 = (m_mid26_fu_313_p3 + 2'd1);

assign add_ln31_fu_426_p2 = (n_mid2_fu_364_p3 + 2'd1);

assign add_ln34_1_fu_471_p2 = (sub_ln34_2_fu_462_p2 + zext_ln34_7_fu_468_p1);

assign add_ln34_fu_420_p2 = (sub_ln34_fu_410_p2 + zext_ln34_5_fu_416_p1);

assign and_ln26_1_fu_214_p2 = (xor_ln26_fu_202_p2 & icmp_ln30_fu_208_p2);

assign and_ln26_fu_330_p2 = (xor_ln26_reg_547 & not_exitcond_flatten_mid234_fu_325_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (m_axi_gmem4_0_RVALID == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_56_fu_354_p2 = (icmp_ln31_mid211_fu_335_p2 | and_ln26_1_reg_557);

assign empty_57_fu_359_p2 = (icmp_ln28_reg_539 | empty_56_fu_354_p2);

assign empty_fu_220_p2 = (icmp_ln28_fu_196_p2 | and_ln26_1_fu_214_p2);

assign exitcond_flatten_not_fu_320_p2 = (icmp_ln30_reg_552 ^ 1'd1);

assign icmp_ln26_fu_172_p2 = ((ap_sig_allocacmp_indvar_flatten35_load == 14'd9216) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_196_p2 = ((ap_sig_allocacmp_indvar_flatten12_load == 10'd288) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_208_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_294_p2 = ((n_fu_78 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln31_mid211_fu_335_p2 = (icmp_ln31_fu_294_p2 & and_ln26_fu_330_p2);

assign local_weights_address0 = zext_ln34_8_fu_477_p1;

assign local_weights_ce0 = local_weights_ce0_local;

assign local_weights_d0 = gmem4_addr_read_reg_579;

assign local_weights_we0 = local_weights_we0_local;

assign m_axi_gmem4_0_ARADDR = 32'd0;

assign m_axi_gmem4_0_ARBURST = 2'd0;

assign m_axi_gmem4_0_ARCACHE = 4'd0;

assign m_axi_gmem4_0_ARID = 1'd0;

assign m_axi_gmem4_0_ARLEN = 32'd0;

assign m_axi_gmem4_0_ARLOCK = 2'd0;

assign m_axi_gmem4_0_ARPROT = 3'd0;

assign m_axi_gmem4_0_ARQOS = 4'd0;

assign m_axi_gmem4_0_ARREGION = 4'd0;

assign m_axi_gmem4_0_ARSIZE = 3'd0;

assign m_axi_gmem4_0_ARUSER = 1'd0;

assign m_axi_gmem4_0_ARVALID = 1'b0;

assign m_axi_gmem4_0_AWADDR = 32'd0;

assign m_axi_gmem4_0_AWBURST = 2'd0;

assign m_axi_gmem4_0_AWCACHE = 4'd0;

assign m_axi_gmem4_0_AWID = 1'd0;

assign m_axi_gmem4_0_AWLEN = 32'd0;

assign m_axi_gmem4_0_AWLOCK = 2'd0;

assign m_axi_gmem4_0_AWPROT = 3'd0;

assign m_axi_gmem4_0_AWQOS = 4'd0;

assign m_axi_gmem4_0_AWREGION = 4'd0;

assign m_axi_gmem4_0_AWSIZE = 3'd0;

assign m_axi_gmem4_0_AWUSER = 1'd0;

assign m_axi_gmem4_0_AWVALID = 1'b0;

assign m_axi_gmem4_0_BREADY = 1'b0;

assign m_axi_gmem4_0_WDATA = 16'd0;

assign m_axi_gmem4_0_WID = 1'd0;

assign m_axi_gmem4_0_WLAST = 1'b0;

assign m_axi_gmem4_0_WSTRB = 2'd0;

assign m_axi_gmem4_0_WUSER = 1'd0;

assign m_axi_gmem4_0_WVALID = 1'b0;

assign m_mid26_fu_313_p3 = ((empty_reg_563[0:0] == 1'b1) ? 2'd0 : m_fu_82);

assign n_mid2_fu_364_p3 = ((empty_57_fu_359_p2[0:0] == 1'b1) ? 2'd0 : n_fu_78);

assign not_exitcond_flatten_mid234_fu_325_p2 = (icmp_ln28_reg_539 | exitcond_flatten_not_fu_320_p2);

assign p_shl2_fu_400_p4 = {{{trunc_ln34_fu_380_p1}, {trunc_ln34_2_fu_384_p1}}, {2'd0}};

assign p_shl_fu_455_p3 = {{add_ln34_reg_573}, {2'd0}};

assign select_ln26_2_fu_300_p3 = ((icmp_ln28_reg_539[0:0] == 1'b1) ? add_ln26_fu_281_p2 : oc_fu_98);

assign select_ln26_fu_287_p3 = ((icmp_ln28_reg_539[0:0] == 1'b1) ? 6'd0 : ic_fu_90);

assign select_ln28_1_fu_246_p3 = ((icmp_ln28_fu_196_p2[0:0] == 1'b1) ? 10'd1 : add_ln28_1_fu_240_p2);

assign select_ln28_fu_341_p3 = ((and_ln26_1_reg_557[0:0] == 1'b1) ? add_ln28_fu_307_p2 : select_ln26_fu_287_p3);

assign select_ln30_2_fu_232_p3 = ((empty_fu_220_p2[0:0] == 1'b1) ? 4'd1 : add_ln30_2_fu_226_p2);

assign select_ln30_fu_372_p3 = ((icmp_ln31_mid211_fu_335_p2[0:0] == 1'b1) ? add_ln30_fu_348_p2 : m_mid26_fu_313_p3);

assign sub_ln34_2_fu_462_p2 = (p_shl_fu_455_p3 - zext_ln34_6_fu_452_p1);

assign sub_ln34_fu_410_p2 = (p_shl2_fu_400_p4 - zext_ln34_fu_396_p1);

assign tmp_s_fu_388_p3 = {{trunc_ln34_fu_380_p1}, {trunc_ln34_2_fu_384_p1}};

assign trunc_ln34_2_fu_384_p1 = select_ln28_fu_341_p3[4:0];

assign trunc_ln34_fu_380_p1 = select_ln26_2_fu_300_p3[4:0];

assign xor_ln26_fu_202_p2 = (icmp_ln28_fu_196_p2 ^ 1'd1);

assign zext_ln34_5_fu_416_p1 = select_ln30_fu_372_p3;

assign zext_ln34_6_fu_452_p1 = add_ln34_reg_573;

assign zext_ln34_7_fu_468_p1 = n_mid2_reg_568;

assign zext_ln34_8_fu_477_p1 = add_ln34_1_fu_471_p2;

assign zext_ln34_fu_396_p1 = tmp_s_fu_388_p3;

endmodule //cnn_top_load_params_func_1_Pipeline_VITIS_LOOP_26_1_VITIS_LOOP_28_2_VITIS_LOOP_30_3_VITI
